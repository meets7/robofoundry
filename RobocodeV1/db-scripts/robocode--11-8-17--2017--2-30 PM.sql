# ************************************************************
# Sequel Pro SQL dump
# Version 4541
#
# http://www.sequelpro.com/
# https://github.com/sequelpro/sequelpro
#
# Host: 127.0.0.1 (MySQL 5.7.18)
# Database: robocode
# Generation Time: 2017-11-08 20:30:03 +0000
# ************************************************************


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;


# Dump of table battlestat
# ------------------------------------------------------------

DROP TABLE IF EXISTS `battlestat`;

CREATE TABLE `battlestat` (
  `Rank` int(11) DEFAULT NULL,
  `RobotName` varchar(30) DEFAULT NULL,
  `TotalScore` int(11) DEFAULT NULL,
  `PercentofTotal` int(11) DEFAULT NULL,
  `Survival` int(11) DEFAULT NULL,
  `SurvivalBonus` int(11) DEFAULT NULL,
  `BulletDmg` int(11) DEFAULT NULL,
  `BulletBonus` int(11) DEFAULT NULL,
  `RamDmg2` int(11) DEFAULT NULL,
  `RamBonus` int(11) DEFAULT NULL,
  `1sts` int(11) DEFAULT NULL,
  `2nds` int(11) DEFAULT NULL,
  `3rds` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;



# Dump of table robot
# ------------------------------------------------------------

DROP TABLE IF EXISTS `robot`;

CREATE TABLE `robot` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `userID` varchar(80) DEFAULT NULL,
  `packageID` varchar(80) DEFAULT NULL,
  `robotID` varchar(80) DEFAULT NULL,
  `dataaccess` varchar(4) DEFAULT NULL,
  `filepath` longtext,
  `CreatedDate` varchar(200) DEFAULT NULL,
  `UpdatedDate` varchar(200) DEFAULT NULL,
  `RobotCode` longtext,
  `file` longblob,
  `accessLevel` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `robot` WRITE;
/*!40000 ALTER TABLE `robot` DISABLE KEYS */;

INSERT INTO `robot` (`id`, `userID`, `packageID`, `robotID`, `dataaccess`, `filepath`, `CreatedDate`, `UpdatedDate`, `RobotCode`, `file`, `accessLevel`)
VALUES
	(1,'User','sample','Crazy','Y','sample/Crazy.java','Mon Jan 25 10:27:35 CST 2016','Fri Sep 23 17:06:41 CDT 2016','  /**Hi\r\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\r\n * All rights reserved. This program and the accompanying materials\r\n * are made available under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution, and is available at\r\n * http://robocode.sourceforge.net/license/epl-v10.html\r\n */\r\npackage sample;\r\n\r\n\r\nimport robocode.*;\r\n\r\nimport java.awt.*;\r\n\r\n\r\n/**\r\n * Crazy - a sample robot by Mathew Nelson.\r\n * \r\n * This robot moves around in a crazy pattern.\r\n *\r\n * @author Mathew A. Nelson (original)\r\n * @author Flemming N. Larsen (contributor)\r\n */\r\npublic class Crazy extends AdvancedRobot {\r\n    boolean movingForward;\r\n\r\n	/**\r\n	 * run: Crazy\'s main run function\r\n	 */\r\n	public void run() {\r\n		// Set colors\r\n		setBodyColor(new Color(0, 200, 0));\r\n		setGunColor(new Color(0, 150, 50));\r\n		setRadarColor(new Color(0, 100, 100));\r\n		setBulletColor(new Color(255, 255, 100));\r\n		setScanColor(new Color(255, 200, 200));\r\n\r\n		// Loop forever\r\n		while (true) {\r\n			// Tell the game we will want to move ahead 40000 -- some large number\r\n			setAhead(40000);\r\n			movingForward = true;\r\n			// Tell the game we will want to turn right 90\r\n			setTurnRight(90);\r\n			// At this point, we have indicated to the game that *when we do something*,\r\n			// we will want to move ahead and turn right.  That\'s what \"set\" means.\r\n			// It is important to realize we have not done anything yet!\r\n			// In order to actually move, we\'ll want to call a method that\r\n			// takes real time, such as waitFor.\r\n			// waitFor actually starts the action -- we start moving and turning.\r\n			// It will not return until we have finished turning.\r\n			waitFor(new TurnCompleteCondition(this));\r\n			// Note:  We are still moving ahead now, but the turn is complete.\r\n			// Now we\'ll turn the other way...\r\n			setTurnLeft(180);\r\n			// ... and wait for the turn to finish ...\r\n			waitFor(new TurnCompleteCondition(this));\r\n			// ... then the other way ...\r\n			setTurnRight(180);\r\n			// .. and wait for that turn to finish.\r\n			waitFor(new TurnCompleteCondition(this));\r\n			// then back to the top to do it all again\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * onHitWall:  Handle collision with wall.\r\n	 */\r\n	public void onHitWall(HitWallEvent e) {\r\n		// Bounce off!\r\n		reverseDirection();\r\n	}\r\n\r\n	/**\r\n	 * reverseDirection:  Switch from ahead to back \r\n/**\r\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\r\n * All rights reserved. This program and the accompanying materials\r\n * are made available under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution, and is available at\r\n * http://robocode.sourceforge.net/license/epl-v10.html\r\n */\r\npackage sample;\r\n\r\n\r\nimport robocode.*;\r\n\r\nimport java.awt.*;\r\n\r\n\r\n/**\r\n * Crazy - a sample robot by Mathew Nelson.\r\n * \r\n * This robot moves around in a crazy pattern.\r\n *\r\n * @author Mathew A. Nelson (original)\r\n * @author Flemming N. Larsen (contributor)\r\n */\r\npublic class Crazy extends AdvancedRobot {\r\n	boolean movingForward;\r\n\r\n	/**\r\n	 * run: Crazy\'s main run function\r\n	 */\r\n	public void run() {\r\n		// Set colors\r\n		setBodyColor(new Color(0, 200, 0));\r\n		setGunColor(new Color(0, 150, 50));\r\n		setRadarColor(new Color(0, 100, 100));\r\n		setBulletColor(new Color(255, 255, 100));\r\n		setScanColor(new Color(255, 200, 200));\r\n\r\n		// Loop forever\r\n		while (true) {\r\n			// Tell the game we will want to move ahead 40000 -- some large number\r\n			setAhead(40000);\r\n			movingForward = true;\r\n			// Tell the game we will want to turn right 90\r\n			setTurnRight(90);\r\n			// At this point, we have indicated to the game that *when we do something*,\r\n			// we will want to move ahead and turn right.  That\'s what \"set\" means.\r\n			// It is important to realize we have not done anything yet!\r\n			// In order to actually move, we\'ll want to call a method that\r\n			// takes real time, such as waitFor.\r\n			// waitFor actually starts the action -- we start moving and turning.\r\n			// It will not return until we have finished turning.\r\n			waitFor(new TurnCompleteCondition(this));\r\n			// Note:  We are still moving ahead now, but the turn is complete.\r\n			// Now we\'ll turn the other way...\r\n			setTurnLeft(180);\r\n			// ... and wait for the turn to finish ...\r\n			waitFor(new TurnCompleteCondition(this));\r\n			// ... then the other way ...\r\n			setTurnRight(180);\r\n			// .. and wait for that turn to finish.\r\n			waitFor(new TurnCompleteCondition(this));\r\n			// then back to the top to do it all again\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * onHitWall:  Handle collision with wall.\r\n	 */\r\n	public void onHitWall(HitWallEvent e) {\r\n		// Bounce off!\r\n		reverseDirection();\r\n	}\r\n\r\n	/**\r\n	 * reverseDirection:  Switch from ahead to back & vice versa\r\n	 */\r\n	public void reverseDirection() {\r\n		if (movingForward) {\r\n			setBack(40000);\r\n			movingForward = false;\r\n		} else {\r\n			setAhead(40000);\r\n			movingForward = true;\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * onScannedRobot:  Fire!\r\n	 */\r\n	public void onScannedRobot(ScannedRobotEvent e) {\r\n		fire(1);\r\n	}\r\n\r\n	/**\r\n	 * onHitRobot:  Back up!\r\n	 */\r\n	public void onHitRobot(HitRobotEvent e) {\r\n		// If we\'re moving the other robot, reverse!\r\n		if (e.isMyFault()) {\r\n			reverseDirection();\r\n		}\r\n	}\r\n}\r\n/**\r\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\r\n * All rights reserved. This program and the accompanying materials\r\n * are made available under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution, and is available at\r\n * http://robocode.sourceforge.net/license/epl-v10.html\r\n */\r\npackage sample;\r\n\r\n\r\nimport robocode.*;\r\n\r\nimport java.awt.*;\r\n\r\n\r\n/**\r\n * Crazy - a sample robot by Mathew Nelson.\r\n * \r\n * This robot moves around in a crazy pattern.\r\n *\r\n * @author Mathew A. Nelson (original)\r\n * @author Flemming N. Larsen (contributor)\r\n */\r\npublic class Crazy extends AdvancedRobot {\r\n	boolean movingForward;\r\n\r\n	/**\r\n	 * run: Crazy\'s main run function\r\n	 */\r\n	public void run() {\r\n		// Set colors\r\n		setBodyColor(new Color(0, 200, 0));\r\n		setGunColor(new Color(0, 150, 50));\r\n		setRadarColor(new Color(0, 100, 100));\r\n		setBulletColor(new Color(255, 255, 100));\r\n		setScanColor(new Color(255, 200, 200));\r\n\r\n		// Loop forever\r\n		while (true) {\r\n			// Tell the game we will want to move ahead 40000 -- some large number\r\n			setAhead(40000);\r\n			movingForward = true;\r\n			// Tell the game we will want to turn right 90\r\n			setTurnRight(90);\r\n			// At this point, we have indicated to the game that *when we do something*,\r\n			// we will want to move ahead and turn right.  That\'s what \"set\" means.\r\n			// It is important to realize we have not done anything yet!\r\n			// In order to actually move, we\'ll want to call a method that\r\n			// takes real time, such as waitFor.\r\n			// waitFor actually starts the action -- we start moving and turning.\r\n			// It will not return until we have finished turning.\r\n			waitFor(new TurnCompleteCondition(this));\r\n			// Note:  We are still moving ahead now, but the turn is complete.\r\n			// Now we\'ll turn the other way...\r\n			setTurnLeft(180);\r\n			// ... and wait for the turn to finish ...\r\n			waitFor(new TurnCompleteCondition(this));\r\n			// ... then the other way ...\r\n			setTurnRight(180);\r\n			// .. and wait for that turn to finish.\r\n			waitFor(new TurnCompleteCondition(this));\r\n			// then back to the top to do it all again\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * onHitWall:  Handle collision with wall.\r\n	 */\r\n	public void onHitWall(HitWallEvent e) {\r\n		// Bounce off!\r\n		reverseDirection();\r\n	}\r\n\r\n	/**\r\n	 * reverseDirection:  Switch from ahead to back & vice versa\r\n	 */\r\n	public void reverseDirection() {\r\n		if (movingForward) {\r\n			setBack(40000);\r\n			movingForward = false;\r\n		} else {\r\n			setAhead(40000);\r\n			movingForward = true;\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * onScannedRobot:  Fire!\r\n	 */\r\n	public void onScannedRobot(ScannedRobotEvent e) {\r\n		fire(1);\r\n	}\r\n\r\n	/**\r\n	 * onHitRobot:  Back up!\r\n	 */\r\n	public void onHitRobot(HitRobotEvent e) {\r\n		// If we\'re moving the other robot, reverse!\r\n		if (e.isMyFault()) {\r\n			reverseDirection();\r\n		}\r\n	}\r\n}\r\n\r\n\r\n\r\n				\r\n    \r\n				\r\n    \r\n				\r\n    \r\n \r\n     \r\n    \r\n   \r\n \r\n \r\n
	(2,'User','sample','Corners','Y','sample/Corners.java','Mon Jan 25 10:27:35 CST 2016','Mon Feb 01 14:44:42 CST 2016','/**\r\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\r\n * All rights reserved. This program and the accompanying materials\r\n * are made available under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution, and is available at\r\n * http://robocode.sourceforge.net/license/epl-v10.html\r\n */\r\npackage sample;\r\n\r\n\r\nimport robocode.*;\r\n\r\nimport java.awt.*;\r\n\r\n\r\n/**\r\n * Crazy - a sample robot by Mathew Nelson.\r\n * \r\n * This robot moves around in a crazy pattern.\r\n *\r\n * @author Mathew A. Nelson (original)\r\n * @author Flemming N. Larsen (contributor)\r\n */\r\npublic class Crazy extends AdvancedRobot {\r\n    boolean movingForward;\r\n\r\n	/**\r\n	 * run: Crazy\'s main run function\r\n	 */\r\n	public void run() {\r\n		// Set colors\r\n		setBodyColor(new Color(0, 200, 0));\r\n		setGunColor(new Color(0, 150, 50));\r\n		setRadarColor(new Color(0, 100, 100));\r\n		setBulletColor(new Color(255, 255, 100));\r\n		setScanColor(new Color(255, 200, 200));\r\n\r\n		// Loop forever\r\n		while (true) {\r\n			// Tell the game we will want to move ahead 40000 -- some large number\r\n			setAhead(40000);\r\n			movingForward = true;\r\n			// Tell the game we will want to turn right 90\r\n			setTurnRight(90);\r\n			// At this point, we have indicated to the game that *when we do something*,\r\n			// we will want to move ahead and turn right.  That\'s what \"set\" means.\r\n			// It is important to realize we have not done anything yet!\r\n			// In order to actually move, we\'ll want to call a method that\r\n			// takes real time, such as waitFor.\r\n			// waitFor actually starts the action -- we start moving and turning.\r\n			// It will not return until we have finished turning.\r\n			waitFor(new TurnCompleteCondition(this));\r\n			// Note:  We are still moving ahead now, but the turn is complete.\r\n			// Now we\'ll turn the other way...\r\n			setTurnLeft(180);\r\n			// ... and wait for the turn to finish ...\r\n			waitFor(new TurnCompleteCondition(this));\r\n			// ... then the other way ...\r\n			setTurnRight(180);\r\n			// .. and wait for that turn to finish.\r\n			waitFor(new TurnCompleteCondition(this));\r\n			// then back to the top to do it all again\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * onHitWall:  Handle collision with wall.\r\n	 */\r\n	public void onHitWall(HitWallEvent e) {\r\n		// Bounce off!\r\n		reverseDirection();\r\n	}\r\n\r\n	/**\r\n	 * reverseDirection:  Switch from ahead to back \r\n/**\r\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\r\n * All rights reserved. This program and the accompanying materials\r\n * are made available under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution, and is available at\r\n * http://robocode.sourceforge.net/license/epl-v10.html\r\n */\r\npackage sample;\r\n\r\n\r\nimport robocode.*;\r\n\r\nimport java.awt.*;\r\n\r\n\r\n/**\r\n * Crazy - a sample robot by Mathew Nelson.\r\n * \r\n * This robot moves around in a crazy pattern.\r\n *\r\n * @author Mathew A. Nelson (original)\r\n * @author Flemming N. Larsen (contributor)\r\n */\r\npublic class Crazy extends AdvancedRobot {\r\n	boolean movingForward;\r\n\r\n	/**\r\n	 * run: Crazy\'s main run function\r\n	 */\r\n	public void run() {\r\n		// Set colors\r\n		setBodyColor(new Color(0, 200, 0));\r\n		setGunColor(new Color(0, 150, 50));\r\n		setRadarColor(new Color(0, 100, 100));\r\n		setBulletColor(new Color(255, 255, 100));\r\n		setScanColor(new Color(255, 200, 200));\r\n\r\n		// Loop forever\r\n		while (true) {\r\n			// Tell the game we will want to move ahead 40000 -- some large number\r\n			setAhead(40000);\r\n			movingForward = true;\r\n			// Tell the game we will want to turn right 90\r\n			setTurnRight(90);\r\n			// At this point, we have indicated to the game that *when we do something*,\r\n			// we will want to move ahead and turn right.  That\'s what \"set\" means.\r\n			// It is important to realize we have not done anything yet!\r\n			// In order to actually move, we\'ll want to call a method that\r\n			// takes real time, such as waitFor.\r\n			// waitFor actually starts the action -- we start moving and turning.\r\n			// It will not return until we have finished turning.\r\n			waitFor(new TurnCompleteCondition(this));\r\n			// Note:  We are still moving ahead now, but the turn is complete.\r\n			// Now we\'ll turn the other way...\r\n			setTurnLeft(180);\r\n			// ... and wait for the turn to finish ...\r\n			waitFor(new TurnCompleteCondition(this));\r\n			// ... then the other way ...\r\n			setTurnRight(180);\r\n			// .. and wait for that turn to finish.\r\n			waitFor(new TurnCompleteCondition(this));\r\n			// then back to the top to do it all again\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * onHitWall:  Handle collision with wall.\r\n	 */\r\n	public void onHitWall(HitWallEvent e) {\r\n		// Bounce off!\r\n		reverseDirection();\r\n	}\r\n\r\n	/**\r\n	 * reverseDirection:  Switch from ahead to back & vice versa\r\n	 */\r\n	public void reverseDirection() {\r\n		if (movingForward) {\r\n			setBack(40000);\r\n			movingForward = false;\r\n		} else {\r\n			setAhead(40000);\r\n			movingForward = true;\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * onScannedRobot:  Fire!\r\n	 */\r\n	public void onScannedRobot(ScannedRobotEvent e) {\r\n		fire(1);\r\n	}\r\n\r\n	/**\r\n	 * onHitRobot:  Back up!\r\n	 */\r\n	public void onHitRobot(HitRobotEvent e) {\r\n		// If we\'re moving the other robot, reverse!\r\n		if (e.isMyFault()) {\r\n			reverseDirection();\r\n		}\r\n	}\r\n}\r\n/**\r\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\r\n * All rights reserved. This program and the accompanying materials\r\n * are made available under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution, and is available at\r\n * http://robocode.sourceforge.net/license/epl-v10.html\r\n */\r\npackage sample;\r\n\r\n\r\nimport robocode.DeathEvent;\r\nimport robocode.Robot;\r\nimport robocode.ScannedRobotEvent;\r\nimport static robocode.util.Utils.normalRelativeAngleDegrees;\r\n\r\nimport java.awt.*;\r\n\r\n\r\n/**\r\n * Corners - a sample robot by Mathew Nelson.\r\n * \r\n * This robot moves to a corner, then swings the gun back and forth.\r\n * If it dies, it tries a new corner in the next round.\r\n *\r\n * @author Mathew A. Nelson (original)\r\n * @author Flemming N. Larsen (contributor)\r\n */\r\npublic class Corners extends Robot {\r\n	int others; // Number of other robots in the game\r\n	static int corner = 0; // Which corner we are currently using\r\n	// static so that it keeps it between rounds.\r\n	boolean stopWhenSeeRobot = false; // See goCorner()\r\n\r\n	/**\r\n	 * run:  Corners\' main run function.\r\n	 */\r\n	public void run() {\r\n		// Set colors\r\n		setBodyColor(Color.red);\r\n		setGunColor(Color.black);\r\n		setRadarColor(Color.yellow);\r\n		setBulletColor(Color.green);\r\n		setScanColor(Color.green);\r\n\r\n		// Save # of other bots\r\n		others = getOthers();\r\n\r\n		// Move to a corner\r\n		goCorner();\r\n\r\n		// Initialize gun turn speed to 3\r\n		int gunIncrement = 3;\r\n\r\n		// Spin gun back and forth\r\n		while (true) {\r\n			for (int i = 0; i < 30; i++) {\r\n				turnGunLeft(gunIncrement);\r\n			}\r\n			gunIncrement *= -1;\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * goCorner:  A very inefficient way to get to a corner.  Can you do better?\r\n	 */\r\n	public void goCorner() {\r\n		// We don\'t want to stop when we\'re just turning...\r\n		stopWhenSeeRobot = false;\r\n		// turn to face the wall to the \"right\" of our desired corner.\r\n		turnRight(normalRelativeAngleDegrees(corner - getHeading()));\r\n		// Ok, now we don\'t want to crash into any robot in our way...\r\n		stopWhenSeeRobot = true;\r\n		// Move to that wall\r\n		ahead(5000);\r\n		// Turn to face the corner\r\n		turnLeft(90);\r\n		// Move to the corner\r\n		ahead(5000);\r\n		// Turn gun to starting point\r\n		turnGunLeft(90);\r\n	}\r\n\r\n	/**\r\n	 * onScannedRobot:  Stop and fire!\r\n	 */\r\n	public void onScannedRobot(ScannedRobotEvent e) {\r\n		// Should we stop, or just fire?\r\n		if (stopWhenSeeRobot) {\r\n			// Stop everything!  You can safely call stop multiple times.\r\n			stop();\r\n			// Call our custom firing method\r\n			smartFire(e.getDistance());\r\n			// Look for another robot.\r\n			// NOTE:  If you call scan() inside onScannedRobot, and it sees a robot,\r\n			// the game will interrupt the event handler and start it over\r\n			scan();\r\n			// We won\'t get here if we saw another robot.\r\n			// Okay, we didn\'t see another robot... start moving or turning again.\r\n			resume();\r\n		} else {\r\n			smartFire(e.getDistance());\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * smartFire:  Custom fire method that determines firepower based on distance.\r\n	 *\r\n	 * @param robotDistance the distance to the robot to fire at\r\n	 */\r\n	public void smartFire(double robotDistance) {\r\n		if (robotDistance > 200 || getEnergy() < 15) {\r\n			fire(1);\r\n		} else if (robotDistance > 50) {\r\n			fire(2);\r\n		} else {\r\n			fire(3);\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * onDeath:  We died.  Decide whether to try a different corner next game.\r\n	 */\r\n	public void onDeath(DeathEvent e) {\r\n		// Well, others should never be 0, but better safe than sorry.\r\n		if (others == 0) {\r\n			return;\r\n		}\r\n\r\n		// If 75% of the robots are still alive when we die, we\'ll switch corners.\r\n		if ((others - getOthers()) / (double) others < .75) {\r\n			corner += 90;\r\n			if (corner == 270) {\r\n				corner = -90;\r\n			}\r\n			out.println(\"I died and did poorly... switching corner to \" + corner);\r\n		} else {\r\n			out.println(\"I died but did well.  I will still use corner \" + corner);\r\n		}\r\n	}\r\n}\r\n\r\n\r\n \r\n    \r\n\r\n \r\n    \r\n
	(3,'User','sample','Fire','Y','sample/Fire.java','','Wed Feb 03 10:05:48 CST 2016',' /**\r\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\r\n * All rights reserved. This program and the accompanying materials\r\n * are made available under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution, and is available at\r\n * http://robocode.sourceforge.net/license/epl-v10.html\r\n */\r\npackage sample;\r\n\r\n\r\nimport robocode.HitByBulletEvent;\r\nimport robocode.HitRobotEvent;\r\nimport robocode.Robot;\r\nimport robocode.ScannedRobotEvent;\r\nimport static robocode.util.Utils.normalRelativeAngleDegrees;\r\n\r\nimport java.awt.*;\r\n\r\n\r\n/**\r\n * Fire - a sample robot by Mathew Nelson, and maintained.\r\n * \r\n * Sits still. Spins gun around. Moves when hit.\r\n *\r\n * @author Mathew A. Nelson (original)\r\n * @author Flemming N. Larsen (contributor)\r\n */\r\npublic class Fire extends Robot {\r\n	int dist = 50; // distance to move when we\'re hit\r\n\r\n	/**\r\n	 * run:  Fire\'s main run function\r\n	 */\r\n	public void run() {\r\n		// Set colors\r\n		setBodyColor(Color.orange);\r\n		setGunColor(Color.orange);\r\n		setRadarColor(Color.red);\r\n		setScanColor(Color.red);\r\n		setBulletColor(Color.red);\r\n\r\n		// Spin the gun around slowly... forever\r\n		while (true) {\r\n			turnGunRight(5);\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * onScannedRobot:  Fire!\r\n	 */\r\n	public void onScannedRobot(ScannedRobotEvent e) {\r\n		// If the other robot is close by, and we have plenty of life,\r\n		// fire hard!\r\n		if (e.getDistance() < 50 && getEnergy() > 50) {\r\n			fire(3);\r\n		} // otherwise, fire 1.\r\n		else {\r\n			fire(1);\r\n		}\r\n		// Call scan again, before we turn the gun\r\n		scan();\r\n	}\r\n\r\n	/**\r\n	 * onHitByBullet:  Turn perpendicular to the bullet, and move a bit.\r\n	 */\r\n	public void onHitByBullet(HitByBulletEvent e) {\r\n		turnRight(normalRelativeAngleDegrees(90 - (getHeading() - e.getHeading())));\r\n\r\n		ahead(dist);\r\n		dist *= -1;\r\n		scan();\r\n	}\r\n\r\n	/**\r\n	 * onHitRobot:  Aim at it.  Fire Hard!\r\n	 */\r\n	public void onHitRobot(HitRobotEvent e) {\r\n		double turnGunAmt = normalRelativeAngleDegrees(e.getBearing() + getHeading() - getGunHeading());\r\n\r\n		turnGunRight(turnGunAmt);\r\n		fire(3);\r\n	}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
	(4,'User','sample','Interactive','Y','sample/Interactive.java','','Wed Feb 03 09:56:31 CST 2016','/**\r\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\r\n * All rights reserved. This program and the accompanying materials\r\n * are made available under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution, and is available at\r\n * http://robocode.sourceforge.net/license/epl-v10.html\r\n */\r\npackage sample;\r\n\r\n\r\nimport robocode.AdvancedRobot;\r\nimport static robocode.util.Utils.normalAbsoluteAngle;\r\nimport static robocode.util.Utils.normalRelativeAngle;\r\n\r\nimport java.awt.*;\r\nimport java.awt.event.KeyEvent;\r\nimport static java.awt.event.KeyEvent.*;\r\nimport java.awt.event.MouseEvent;\r\nimport java.awt.event.MouseWheelEvent;\r\n\r\n\r\n/**\r\n * Interactive - a sample robot by Flemming N. Larsen.\r\n * <p/>\r\n * This is a robot that is controlled using the arrow keys and mouse only.\r\n * <p/>\r\n * Keys:\r\n * - W or arrow up:    Move forward\r\n * - S or arrow down:  Move backward\r\n * - A or arrow right: Turn right\r\n * - D or arrow left:  Turn left\r\n * Mouse:\r\n * - Moving:      Moves the aim, which the gun will follow\r\n * - Wheel up:    Move forward\r\n * - Wheel down:  Move backward\r\n * - Button 1:    Fire a bullet with power = 1\r\n * - Button 2:    Fire a bullet with power = 2\r\n * - Button 3:    Fire a bullet with power = 3\r\n * <p/>\r\n * The bullet color depends on the fire power:\r\n * - Power = 1:   Yellow\r\n * - Power = 2:   Orange\r\n * - Power = 3:   Red\r\n * <p/>\r\n * Note that the robot will continue firing as long as the mouse button is\r\n * pressed down.\r\n * <p/>\r\n * By enabling the \"Paint\" button on the robot console window for this robot,\r\n * a cross hair will be painted for the robots current aim (controlled by the\r\n * mouse).\r\n *\r\n * @author Flemming N. Larsen (original)\r\n *\r\n * @version 1.2\r\n *\r\n * @since 1.3.4\r\n */\r\npublic class Interactive extends AdvancedRobot {\r\n\r\n	// Move direction: 1 = move forward, 0 = stand still, -1 = move backward\r\n	int moveDirection;\r\n\r\n	// Turn direction: 1 = turn right, 0 = no turning, -1 = turn left\r\n	int turnDirection;\r\n\r\n	// Amount of pixels/units to move\r\n	double moveAmount;\r\n\r\n	// The coordinate of the aim (x,y)\r\n	int aimX, aimY;\r\n\r\n	// Fire power, where 0 = don\'t fire\r\n	int firePower;\r\n\r\n	// Called when the robot must run\r\n	public void run() {\r\n\r\n		// Sets the colors of the robot\r\n		// body = black, gun = white, radar = red\r\n		setColors(Color.BLACK, Color.WHITE, Color.RED);\r\n\r\n		// Loop forever\r\n		for (;;) {\r\n			// Sets the robot to move forward, backward or stop moving depending\r\n			// on the move direction and amount of pixels to move\r\n			setAhead(moveAmount * moveDirection);\r\n\r\n			// Decrement the amount of pixels to move until we reach 0 pixels\r\n			// This way the robot will automatically stop if the mouse wheel\r\n			// has stopped it\'s rotation\r\n			moveAmount = Math.max(0, moveAmount - 1);\r\n\r\n			// Sets the robot to turn right or turn left (at maximum speed) or\r\n			// stop turning depending on the turn direction\r\n			setTurnRight(45 * turnDirection); // degrees\r\n\r\n			// Turns the gun toward the current aim coordinate (x,y) controlled by\r\n			// the current mouse coordinate\r\n			double angle = normalAbsoluteAngle(Math.atan2(aimX - getX(), aimY - getY()));\r\n\r\n			setTurnGunRightRadians(normalRelativeAngle(angle - getGunHeadingRadians()));\r\n\r\n			// Fire the gun with the specified fire power, unless the fire power = 0\r\n			if (firePower > 0) {\r\n				setFire(firePower);\r\n			}\r\n\r\n			// Execute all pending set-statements\r\n			execute();\r\n\r\n			// Next turn is processed in this loop..\r\n		}\r\n	}\r\n\r\n	// Called when a key has been pressed\r\n	public void onKeyPressed(KeyEvent e) {\r\n		switch (e.getKeyCode()) {\r\n		case VK_UP:\r\n		case VK_W:\r\n			// Arrow up key: move direction = forward (infinitely)\r\n			moveDirection = 1;\r\n			moveAmount = Double.POSITIVE_INFINITY;\r\n			break;\r\n\r\n		case VK_DOWN:\r\n		case VK_S:\r\n			// Arrow down key: move direction = backward (infinitely)\r\n			moveDirection = -1;\r\n			moveAmount = Double.POSITIVE_INFINITY;\r\n			break;\r\n\r\n		case VK_RIGHT:\r\n		case VK_D:\r\n			// Arrow right key: turn direction = right\r\n			turnDirection = 1;\r\n			break;\r\n\r\n		case VK_LEFT:\r\n		case VK_A:\r\n			// Arrow left key: turn direction = left\r\n			turnDirection = -1;\r\n			break;\r\n		}\r\n	}\r\n\r\n	// Called when a key has been released (after being pressed)\r\n	public void onKeyReleased(KeyEvent e) {\r\n		switch (e.getKeyCode()) {\r\n		case VK_UP:\r\n		case VK_W:\r\n		case VK_DOWN:\r\n		case VK_S:\r\n			// Arrow up and down keys: move direction = stand still\r\n			moveDirection = 0;\r\n			moveAmount = 0;\r\n			break;\r\n\r\n		case VK_RIGHT:\r\n		case VK_D:\r\n		case VK_LEFT:\r\n		case VK_A:\r\n			// Arrow right and left keys: turn direction = stop turning\r\n			turnDirection = 0;\r\n			break;\r\n		}\r\n	}\r\n\r\n	// Called when the mouse wheel is rotated\r\n	public void onMouseWheelMoved(MouseWheelEvent e) {\r\n		// If the wheel rotation is negative it means that it is moved forward.\r\n		// Set move direction = forward, if wheel is moved forward.\r\n		// Otherwise, set move direction = backward\r\n		moveDirection = (e.getWheelRotation() < 0) ? 1 : -1;\r\n\r\n		// Set the amount to move = absolute wheel rotation amount * 5 (speed)\r\n		// Here 5 means 5 pixels per wheel rotation step. The higher value, the\r\n		// more speed\r\n		moveAmount += Math.abs(e.getWheelRotation()) * 5;\r\n	}\r\n\r\n	// Called when the mouse has been moved\r\n	public void onMouseMoved(MouseEvent e) {\r\n		// Set the aim coordinate = the mouse pointer coordinate\r\n		aimX = e.getX();\r\n		aimY = e.getY();\r\n	}\r\n\r\n	// Called when a mouse button has been pressed\r\n	public void onMousePressed(MouseEvent e) {\r\n		if (e.getButton() == MouseEvent.BUTTON3) {\r\n			// Button 3: fire power = 3 energy points, bullet color = red\r\n			firePower = 3;\r\n			setBulletColor(Color.RED);\r\n		} else if (e.getButton() == MouseEvent.BUTTON2) {\r\n			// Button 2: fire power = 2 energy points, bullet color = orange\r\n			firePower = 2;\r\n			setBulletColor(Color.ORANGE);\r\n		} else {\r\n			// Button 1 or unknown button:\r\n			// fire power = 1 energy points, bullet color = yellow\r\n			firePower = 1;\r\n			setBulletColor(Color.YELLOW);\r\n		}\r\n	}\r\n\r\n	// Called when a mouse button has been released (after being pressed)\r\n	public void onMouseReleased(MouseEvent e) {\r\n		// Fire power = 0, which means \"don\'t fire\"\r\n		firePower = 0;\r\n	}\r\n\r\n	// Called in order to paint graphics for this robot.\r\n	// \"Paint\" button on the robot console window for this robot must be\r\n	// enabled in order to see the paintings.\r\n	public void onPaint(Graphics2D g) {\r\n		// Draw a red cross hair with the center at the current aim\r\n		// coordinate (x,y)\r\n		g.setColor(Color.RED);\r\n		g.drawOval(aimX - 15, aimY - 15, 30, 30);\r\n		g.drawLine(aimX, aimY - 4, aimX, aimY + 4);\r\n		g.drawLine(aimX - 4, aimY, aimX + 4, aimY);\r\n	}\r\n}\r\n\r\n
	(5,'User','sample','Interactive_v2','Y','sample/Interactive_v2.java','','Wed Feb 03 10:11:47 CST 2016','/**\r\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\r\n * All rights reserved. This program and the accompanying materials\r\n * are made available under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution, and is available at\r\n * http://robocode.sourceforge.net/license/epl-v10.html\r\n */\r\npackage sample;\r\n\r\n\r\nimport robocode.AdvancedRobot;\r\nimport robocode.util.Utils;\r\nimport static robocode.util.Utils.normalAbsoluteAngle;\r\nimport static robocode.util.Utils.normalRelativeAngle;\r\n\r\nimport java.awt.*;\r\nimport java.awt.event.KeyEvent;\r\nimport static java.awt.event.KeyEvent.*;\r\nimport java.awt.event.MouseEvent;\r\nimport java.awt.event.MouseWheelEvent;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\n\r\n/**\r\n * Interactive_v2 - a modified version of the sample robot Interactive by Flemming N. Larsen\r\n *                  to use absolute movements (up, right, down, left) by Tuan Anh Nguyen.\r\n * <p/>\r\n * This is a robot that is controlled using the arrow keys (or WASD) and mouse only.\r\n * <p/>\r\n * Keys:\r\n * - W or arrow up:    Move up\r\n * - S or arrow down:  Move down\r\n * - A or arrow right: Move right\r\n * - D or arrow left:  Move left\r\n * Mouse:\r\n * - Moving:      Moves the aim, which the gun will follow\r\n * - Button 1:    Fire a bullet with power = 1\r\n * - Button 2:    Fire a bullet with power = 2\r\n * - Button 3:    Fire a bullet with power = 3\r\n * <p/>\r\n * The bullet color depends on the fire power:\r\n * - Power = 1:   Yellow\r\n * - Power = 2:   Orange\r\n * - Power = 3:   Red\r\n * <p/>\r\n * Note that the robot will continue firing as long as the mouse button is\r\n * pressed down.\r\n * <p/>\r\n * By enabling the \"Paint\" button on the robot console window for this robot,\r\n * a cross hair will be painted for the robots current aim (controlled by the\r\n * mouse).\r\n *\r\n * @author Flemming N. Larsen (original)\r\n * @author Tuan Anh Nguyen (contributor)\r\n *\r\n * @version 1.0\r\n *\r\n * @since 1.7.2.2\r\n */\r\npublic class Interactive_v2 extends AdvancedRobot {\r\n\r\n	// The coordinate of the aim (x,y)\r\n	int aimX, aimY;\r\n\r\n	// Fire power, where 0 = don\'t fire\r\n	int firePower;\r\n\r\n	// Absolute directions on the screen\r\n	private enum Direction {\r\n		UP,\r\n		DOWN,\r\n		LEFT,\r\n		RIGHT\r\n	}\r\n\r\n	// Current move directions\r\n	private final Set<Direction> directions = new HashSet<Direction>();\r\n\r\n	// Called when the robot must run\r\n	public void run() {\r\n\r\n		// Sets the colors of the robot\r\n		// body = black, gun = white, radar = red\r\n		setColors(Color.BLACK, Color.WHITE, Color.RED);\r\n\r\n		// Loop forever\r\n		for (;;) {\r\n			// Move the robot compared to the distance to move\r\n			setAhead(distanceToMove());\r\n\r\n			// Turn the body to it points in the correct direction\r\n			setTurnRight(angleToTurnInDegrees());\r\n\r\n			// Turns the gun toward the current aim coordinate (x,y) controlled by\r\n			// the current mouse coordinate\r\n			double angle = normalAbsoluteAngle(Math.atan2(aimX - getX(), aimY - getY()));\r\n\r\n			setTurnGunRightRadians(normalRelativeAngle(angle - getGunHeadingRadians()));\r\n\r\n			// Fire the gun with the specified fire power, unless the fire power = 0\r\n			if (firePower > 0) {\r\n				setFire(firePower);\r\n			}\r\n\r\n			// Execute all pending set-statements\r\n			execute();\r\n\r\n			// Next turn is processed in this loop..\r\n		}\r\n	}\r\n\r\n	// Called when a key has been pressed\r\n	public void onKeyPressed(KeyEvent e) {\r\n		switch (e.getKeyCode()) {\r\n		case VK_UP:\r\n		case VK_W:\r\n			directions.add(Direction.UP);\r\n			break;\r\n\r\n		case VK_DOWN:\r\n		case VK_S:\r\n			directions.add(Direction.DOWN);\r\n			break;\r\n\r\n		case VK_RIGHT:\r\n		case VK_D:\r\n			directions.add(Direction.RIGHT);\r\n			break;\r\n\r\n		case VK_LEFT:\r\n		case VK_A:\r\n			directions.add(Direction.LEFT);\r\n			break;\r\n		}\r\n	}\r\n\r\n	// Called when a key has been released (after being pressed)\r\n	public void onKeyReleased(KeyEvent e) {\r\n		switch (e.getKeyCode()) {\r\n		case VK_UP:\r\n		case VK_W:\r\n			directions.remove(Direction.UP);\r\n			break;\r\n\r\n		case VK_DOWN:\r\n		case VK_S:\r\n			directions.remove(Direction.DOWN);\r\n			break;\r\n\r\n		case VK_RIGHT:\r\n		case VK_D:\r\n			directions.remove(Direction.RIGHT);\r\n			break;\r\n\r\n		case VK_LEFT:\r\n		case VK_A:\r\n			directions.remove(Direction.LEFT);\r\n			break;\r\n		}\r\n	}\r\n\r\n	// Called when the mouse wheel is rotated\r\n	public void onMouseWheelMoved(MouseWheelEvent e) {// Do nothing\r\n	}\r\n\r\n	// Called when the mouse has been moved\r\n	public void onMouseMoved(MouseEvent e) {\r\n		// Set the aim coordinate = the mouse pointer coordinate\r\n		aimX = e.getX();\r\n		aimY = e.getY();\r\n	}\r\n\r\n	// Called when a mouse button has been pressed\r\n	public void onMousePressed(MouseEvent e) {\r\n		if (e.getButton() == MouseEvent.BUTTON3) {\r\n			// Button 3: fire power = 3 energy points, bullet color = red\r\n			firePower = 3;\r\n			setBulletColor(Color.RED);\r\n		} else if (e.getButton() == MouseEvent.BUTTON2) {\r\n			// Button 2: fire power = 2 energy points, bullet color = orange\r\n			firePower = 2;\r\n			setBulletColor(Color.ORANGE);\r\n		} else {\r\n			// Button 1 or unknown button:\r\n			// fire power = 1 energy points, bullet color = yellow\r\n			firePower = 1;\r\n			setBulletColor(Color.YELLOW);\r\n		}\r\n	}\r\n\r\n	// Called when a mouse button has been released (after being pressed)\r\n	public void onMouseReleased(MouseEvent e) {\r\n		// Fire power = 0, which means \"don\'t fire\"\r\n		firePower = 0;\r\n	}\r\n\r\n	// Called in order to paint graphics for this robot.\r\n	// \"Paint\" button on the robot console window for this robot must be\r\n	// enabled in order to see the paintings.\r\n	public void onPaint(Graphics2D g) {\r\n		// Draw a red cross hair with the center at the current aim\r\n		// coordinate (x,y)\r\n		g.setColor(Color.RED);\r\n		g.drawOval(aimX - 15, aimY - 15, 30, 30);\r\n		g.drawLine(aimX, aimY - 4, aimX, aimY   4);\r\n		g.drawLine(aimX - 4, aimY, aimX   4, aimY);\r\n	}\r\n\r\n	// Returns the angle to turn, which is the delta between the desired\r\n	// direction and the current heading of the robot\r\n	private double angleToTurnInDegrees() {\r\n		if (directions.isEmpty()) {\r\n			return 0;\r\n		}\r\n		return Utils.normalRelativeAngleDegrees(desiredDirection() - getHeading());\r\n	}\r\n\r\n	// Returns the distance to move\r\n	private double distanceToMove() {\r\n		// If no keys are pressed, we should not move at all\r\n		if (directions.isEmpty()) {\r\n			return 0;\r\n		}\r\n		// If the robot has more than 45 degrees to turn, move only 5 pixel \r\n		if (Math.abs(angleToTurnInDegrees()) > 45) {\r\n			return 5;\r\n		}\r\n		// Otherwise, move at full speed\r\n		return Double.POSITIVE_INFINITY;\r\n	}\r\n\r\n	// Return the desired direction depending on the pending move directions.\r\n	// With one arrow key pressed, the move to N, E, S, W.\r\n	// With two keys pressed, the robot also move to NE, NW, SE, SW.\r\n	private double desiredDirection() {\r\n		if (directions.contains(Direction.UP)) {\r\n			if (directions.contains(Direction.RIGHT)) {\r\n				return 45;\r\n			}\r\n			if (directions.contains(Direction.LEFT)) {\r\n				return 315;\r\n			}\r\n			return 0;\r\n		}\r\n		if (directions.contains(Direction.DOWN)) {\r\n			if (directions.contains(Direction.RIGHT)) {\r\n				return 135;\r\n			}\r\n			if (directions.contains(Direction.LEFT)) {\r\n				return 225;\r\n			}\r\n			return 180;\r\n		}\r\n		if (directions.contains(Direction.RIGHT)) {\r\n			return 90;\r\n		}\r\n		if (directions.contains(Direction.LEFT)) {\r\n			return 270;\r\n		}\r\n		return 0;\r\n	}\r\n}\r\n\r\n
	(6,'User','sample','MyFirstJuniorRobot','Y','sample/MyFirstJuniorRobot.java','','Mon Jan 25 10:03:29 CST 2016','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sample;\n\n\nimport robocode.JuniorRobot;\n\n\n/**\n * MyFirstJuniorRobot - a sample robot by Flemming N. Larsen\n * <p/>\n * Moves in a seesaw motion, and spins the gun around at each end\n * when it cannot see any enemy robot. When the robot sees and enemy\n * robot, it will immediately turn the gun and fire at it.\n *\n * @author Flemming N. Larsen (original)\n */\npublic class MyFirstJuniorRobot extends JuniorRobot {\n\n	/**\n	 * MyFirstJuniorRobot\'s run method - Seesaw as default\n	 */\n	public void run() {\n		// Set robot colors\n		setColors(green, black, blue);\n\n		// Seesaw forever\n		while (true) {\n			ahead(100); // Move ahead 100\n			turnGunRight(360); // Spin gun around\n			back(100); // Move back 100\n			turnGunRight(360); // Spin gun around\n		}\n	}\n\n	/**\n	 * When we see a robot, turn the gun towards it and fire\n	 */\n	public void onScannedRobot() {\n		// Turn gun to point at the scanned robot\n		turnGunTo(scannedAngle);\n\n		// Fire!\n		fire(1);\n	}\n\n	/**\n	 * We were hit!  Turn and move perpendicular to the bullet,\n	 * so our seesaw might avoid a future shot.\n	 */\n	public void onHitByBullet() {\n		// Move ahead 100 and in the same time turn left papendicular to the bullet\n		turnAheadLeft(100, 90 - hitByBulletBearing);\n	}\n}\n
	(7,'User','sample','MyFirstRobot','Y','sample/MyFirstRobot.java','','Tue Jan 26 11:27:43 CST 2016','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sample;\n\n\nimport robocode.HitByBulletEvent;\nimport robocode.Robot;\nimport robocode.ScannedRobotEvent;\n\n\n/**\n * MyFirstRobot - a sample robot by Mathew Nelson.\n * <p/>\n * Moves in a seesaw motion, and spins the gun around at each end.\n *\n * @author Mathew A. Nelson (original)\n */\npublic class MyFirstRobot extends Robot {\n\n	/**\n	 * MyFirstRobot\'s run method - Seesaw\n	 */\n	public void run() {\n\n		while (true) {\n			ahead(100); // Move ahead 100\n			turnGunRight(360); // Spin gun around\n			back(100); // Move back 100\n			turnGunRight(360); // Spin gun around\n		}\n	}\n\n	/**\n	 * Fire when we see a robot\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		fire(1);\n	}\n\n	/**\n	 * We were hit!  Turn perpendicular to the bullet,\n	 * so our seesaw might avoid a future shot.\n	 */\n	public void onHitByBullet(HitByBulletEvent e) {\n		turnLeft(90 - e.getBearing());\n	}\n}\n\n\n\n',X'2F2A2A0A202A20436F707972696768742028632920323030312D32303134204D617468657720412E204E656C736F6E20616E6420526F626F636F646520636F6E7472696275746F72730A202A20416C6C207269676874732072657365727665642E20546869732070726F6772616D20616E6420746865206163636F6D70616E79696E67206D6174657269616C730A202A20617265206D61646520617661696C61626C6520756E64657220746865207465726D73206F66207468652045636C69707365205075626C6963204C6963656E73652076312E300A202A207768696368206163636F6D70616E696573207468697320646973747269627574696F6E2C20616E6420697320617661696C61626C652061740A202A20687474703A2F2F726F626F636F64652E736F75726365666F7267652E6E65742F6C6963656E73652F65706C2D7631302E68746D6C0A202A2F0A7061636B6167652073616D706C653B0A0A0A696D706F727420726F626F636F64652E486974427942756C6C65744576656E743B0A696D706F727420726F626F636F64652E526F626F743B0A696D706F727420726F626F636F64652E5363616E6E6564526F626F744576656E743B0A0A0A2F2A2A0A202A204D794669727374526F626F74202D20612073616D706C6520726F626F74206279204D6174686577204E656C736F6E2E0A202A203C702F3E0A202A204D6F76657320696E206120736565736177206D6F74696F6E2C20616E64207370696E73207468652067756E2061726F756E64206174206561636820656E642E0A202A0A202A2040617574686F72204D617468657720412E204E656C736F6E20286F726967696E616C290A202A2F0A7075626C696320636C617373204D794669727374526F626F7420657874656E647320526F626F74207B0A0A092F2A2A0A09202A204D794669727374526F626F7427732072756E206D6574686F64202D205365657361770A09202A2F0A097075626C696320766F69642072756E2829207B0A0A09097768696C6520287472756529207B0A090909616865616428313030293B202F2F204D6F7665206168656164203130300A0909097475726E47756E526967687428333630293B202F2F205370696E2067756E2061726F756E640A0909096261636B28313030293B202F2F204D6F7665206261636B203130300A0909097475726E47756E526967687428333630293B202F2F205370696E2067756E2061726F756E640A09097D0A097D0A0A092F2A2A0A09202A2046697265207768656E20776520736565206120726F626F740A09202A2F0A097075626C696320766F6964206F6E5363616E6E6564526F626F74285363616E6E6564526F626F744576656E74206529207B0A0909666972652831293B0A097D0A0A092F2A2A0A09202A2057652077657265206869742120205475726E2070657270656E646963756C617220746F207468652062756C6C65742C0A09202A20736F206F757220736565736177206D696768742061766F69642061206675747572652073686F742E0A09202A2F0A097075626C696320766F6964206F6E486974427942756C6C657428486974427942756C6C65744576656E74206529207B0A09097475726E4C656674283930202D20652E67657442656172696E672829293B0A097D0A7D0909090909090909090909090A0A',0),
	(8,'User','sample','PaintingRobot','Y','C:/robocode/robots/sample/PaintingRobot.java','','Fri Jan 22 17:33:56 CST 2016','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sample;\n\n\nimport robocode.HitByBulletEvent;\nimport robocode.Robot;\nimport robocode.ScannedRobotEvent;\n\nimport java.awt.*;\n\n\n/**\n * PaintingRobot - a sample robot that demonstrates the onPaint() and\n * getGraphics() methods.\n * Also demonstrate feature of debugging properties on RobotDialog\n * <p/>\n * Moves in a seesaw motion, and spins the gun around at each end.\n * When painting is enabled for this robot, a red circle will be painted\n * around this robot.\n *\n * @author Stefan Westen (original SGSample)\n * @author Pavel Savara (contributor)\n */\npublic class PaintingRobot extends Robot {\n\n	/**\n	 * PaintingRobot\'s run method - Seesaw\n	 */\n	public void run() {\n		while (true) {\n			ahead(100);\n			turnGunRight(360);\n			back(100);\n			turnGunRight(360);\n		}\n	}\n\n	/**\n	 * Fire when we see a robot\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		// demonstrate feature of debugging properties on RobotDialog\n		setDebugProperty(\"lastScannedRobot\", e.getName()   \" at \"   e.getBearing()   \" degrees at time \"   getTime());\n		\n		fire(1);\n	}\n\n	/**\n	 * We were hit!  Turn perpendicular to the bullet,\n	 * so our seesaw might avoid a future shot.\n	 * In addition, draw orange circles where we were hit.\n	 */\n	public void onHitByBullet(HitByBulletEvent e) {\n		// demonstrate feature of debugging properties on RobotDialog\n		setDebugProperty(\"lastHitBy\", e.getName()   \" with power of bullet \"   e.getPower()   \" at time \"   getTime());\n\n		// show how to remove debugging property\n		setDebugProperty(\"lastScannedRobot\", null);\n\n		// gebugging by painting to battle view\n		Graphics2D g = getGraphics();\n\n		g.setColor(Color.orange);\n		g.drawOval((int) (getX() - 55), (int) (getY() - 55), 110, 110);\n		g.drawOval((int) (getX() - 56), (int) (getY() - 56), 112, 112);\n		g.drawOval((int) (getX() - 59), (int) (getY() - 59), 118, 118);\n		g.drawOval((int) (getX() - 60), (int) (getY() - 60), 120, 120);\n\n		turnLeft(90 - e.getBearing());\n	}\n\n	/**\n	 * Paint a red circle around our PaintingRobot\n	 */\n	public void onPaint(Graphics2D g) {\n		g.setColor(Color.red);\n		g.drawOval((int) (getX() - 50), (int) (getY() - 50), 100, 100);\n		g.setColor(new Color(0, 0xFF, 0, 30));\n		g.fillOval((int) (getX() - 60), (int) (getY() - 60), 120, 120);\n	}\n}\n
	(9,'User','sample','RamFire','Y','C:/robocode/robots/sample/RamFire.java','','Tue Jan 26 11:34:09 CST 2016','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sample;\n\n\nimport robocode.HitRobotEvent;\nimport robocode.Robot;\nimport robocode.ScannedRobotEvent;\n\nimport java.awt.*;\n\n\n/**\n * RamFire - a sample robot by Mathew Nelson.\n * <p/>\n * Drives at robots trying to ram them.\n * Fires when it hits them.\n *\n * @author Mathew A. Nelson (original)\n * @author Flemming N. Larsen (contributor)\n */\npublic class RamFire extends Robot {\n	int turnDirection = 1; // Clockwise or counterclockwise\n\n	/**\n	 * run: Spin around looking for a target\n	 */\n	public void run() {\n		// Set colors\n		setBodyColor(Color.lightGray);\n		setGunColor(Color.gray);\n		setRadarColor(Color.darkGray);\n\n		while (true) {\n			turnRight(5 * turnDirection);\n		}\n	}\n\n	/**\n	 * onScannedRobot:  We have a target.  Go get it.\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n\n		if (e.getBearing() >= 0) {\n			turnDirection = 1;\n		} else {\n			turnDirection = -1;\n		}\n\n		turnRight(e.getBearing());\n		ahead(e.getDistance());\n		scan(); // Might want to move ahead again!\n	}\n\n	/**\n	 * onHitRobot:  Turn to face robot, fire hard, and ram him again!\n	 */\n	public void onHitRobot(HitRobotEvent e) {\n		if (e.getBearing() >= 0) {\n			turnDirection = 1;\n		} else {\n			turnDirection = -1;\n		}\n		turnRight(e.getBearing());\n\n		// Determine a shot that won\'t kill the robot...\n		// We want to ram him instead for bonus points\n		if (e.getEnergy() > 16) {\n			fire(3);\n		} else if (e.getEnergy() > 10) {\n			fire(2);\n		} else if (e.getEnergy() > 4) {\n			fire(1);\n		} else if (e.getEnergy() > 2) {\n			fire(.5);\n		} else if (e.getEnergy() > .4) {\n			fire(.1);\n		}\n		ahead(40); // Ram him again!\n	}\n}\n\n\n\n\n
	(10,'User','sample','SittingDuck','Y','C:/robocode/robots/sample/SittingDuck.java','','Fri Jan 22 17:45:16 CST 2016','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sample;\n\n\nimport robocode.AdvancedRobot;\nimport robocode.RobocodeFileOutputStream;\n\nimport java.awt.*;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.PrintStream;\n\n\n/**\n * SittingDuck - a sample robot by Mathew Nelson.\n * <p/>\n * Along with sitting still doing nothing, this robot demonstrates persistency.\n *\n * @author Mathew A. Nelson (original)\n * @author Flemming N. Larsen (contributor)\n * @author Andrew Magargle (contributor)\n */\npublic class SittingDuck extends AdvancedRobot {\n	static boolean incrementedBattles = false;\n\n	public void run() {\n		setBodyColor(Color.yellow);\n		setGunColor(Color.yellow);\n\n		int roundCount, battleCount;\n\n		try {\n			BufferedReader reader = null;\n			try {\n				// Read file \"count.dat\" which contains 2 lines, a round count, and a battle count\n				reader = new BufferedReader(new FileReader(getDataFile(\"count.dat\")));\n\n				// Try to get the counts\n				roundCount = Integer.parseInt(reader.readLine());\n				battleCount = Integer.parseInt(reader.readLine());\n\n			} finally {\n				if (reader != null) {\n					reader.close();\n				}\n			}\n		} catch (IOException e) {\n			// Something went wrong reading the file, reset to 0.\n			roundCount = 0;\n			battleCount = 0;\n		} catch (NumberFormatException e) {\n			// Something went wrong converting to ints, reset to 0\n			roundCount = 0;\n			battleCount = 0;\n		}\n\n		// Increment the # of rounds\n		roundCount  ;\n\n		// If we haven\'t incremented # of battles already,\n		// Note: Because robots are only instantiated once per battle, member variables remain valid throughout it.\n		if (!incrementedBattles) {\n			// Increment # of battles\n			battleCount  ;\n			incrementedBattles = true;\n		}\n\n		PrintStream w = null;\n		try {\n			w = new PrintStream(new RobocodeFileOutputStream(getDataFile(\"count.dat\")));\n\n			w.println(roundCount);\n			w.println(battleCount);\n\n			// PrintStreams don\'t throw IOExceptions during prints, they simply set a flag.... so check it here.\n			if (w.checkError()) {\n				out.println(\"I could not write the count!\");\n			}\n		} catch (IOException e) {\n			out.println(\"IOException trying to write: \");\n			e.printStackTrace(out);\n		} finally {\n			if (w != null) {\n				w.close();\n			}\n		}\n		out.println(\"I have been a sitting duck for \"   roundCount   \" rounds, in \"   battleCount   \" battles.\"); \n	}\n}\n\n
	(11,'User','sample','SpinBot','Y','C:/robocode/robots/sample/SpinBot.java','','','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sample;\n\n\nimport robocode.AdvancedRobot;\nimport robocode.HitRobotEvent;\nimport robocode.ScannedRobotEvent;\n\nimport java.awt.*;\n\n\n/**\n * SpinBot - a sample robot by Mathew Nelson.\n * <p/>\n * Moves in a circle, firing hard when an enemy is detected.\n *\n * @author Mathew A. Nelson (original)\n * @author Flemming N. Larsen (contributor)\n */\npublic class SpinBot extends AdvancedRobot {\n\n	/**\n	 * SpinBot\'s run method - Circle\n	 */\n	public void run() {\n		// Set colors\n		setBodyColor(Color.blue);\n		setGunColor(Color.blue);\n		setRadarColor(Color.black);\n		setScanColor(Color.yellow);\n\n		// Loop forever\n		while (true) {\n			// Tell the game that when we take move,\n			// we\'ll also want to turn right... a lot.\n			setTurnRight(10000);\n			// Limit our speed to 5\n			setMaxVelocity(5);\n			// Start moving (and turning)\n			ahead(10000);\n			// Repeat.\n		}\n	}\n\n	/**\n	 * onScannedRobot: Fire hard!\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		fire(3);\n	}\n\n	/**\n	 * onHitRobot:  If it\'s our fault, we\'ll stop turning and moving,\n	 * so we need to turn again to keep spinning.\n	 */\n	public void onHitRobot(HitRobotEvent e) {\n		if (e.getBearing() > -10 && e.getBearing() < 10) {\n			fire(3);\n		}\n		if (e.isMyFault()) {\n			turnRight(10);\n		}\n	}\n}',X'2F2A2A0A202A20436F707972696768742028632920323030312D32303134204D617468657720412E204E656C736F6E20616E6420526F626F636F646520636F6E7472696275746F72730A202A20416C6C207269676874732072657365727665642E20546869732070726F6772616D20616E6420746865206163636F6D70616E79696E67206D6174657269616C730A202A20617265206D61646520617661696C61626C6520756E64657220746865207465726D73206F66207468652045636C69707365205075626C6963204C6963656E73652076312E300A202A207768696368206163636F6D70616E696573207468697320646973747269627574696F6E2C20616E6420697320617661696C61626C652061740A202A20687474703A2F2F726F626F636F64652E736F75726365666F7267652E6E65742F6C6963656E73652F65706C2D7631302E68746D6C0A202A2F0A7061636B6167652073616D706C653B0A0A0A696D706F727420726F626F636F64652E416476616E636564526F626F743B0A696D706F727420726F626F636F64652E486974526F626F744576656E743B0A696D706F727420726F626F636F64652E5363616E6E6564526F626F744576656E743B0A0A696D706F7274206A6176612E6177742E2A3B0A0A0A2F2A2A0A202A205370696E426F74202D20612073616D706C6520726F626F74206279204D6174686577204E656C736F6E2E0A202A203C702F3E0A202A204D6F76657320696E206120636972636C652C20666972696E672068617264207768656E20616E20656E656D792069732064657465637465642E0A202A0A202A2040617574686F72204D617468657720412E204E656C736F6E20286F726967696E616C290A202A2040617574686F7220466C656D6D696E67204E2E204C617273656E2028636F6E7472696275746F72290A202A2F0A7075626C696320636C617373205370696E426F7420657874656E647320416476616E636564526F626F74207B0A0A092F2A2A0A09202A205370696E426F7427732072756E206D6574686F64202D20436972636C650A09202A2F0A097075626C696320766F69642072756E2829207B0A09092F2F2053657420636F6C6F72730A0909736574426F6479436F6C6F7228436F6C6F722E626C7565293B0A090973657447756E436F6C6F7228436F6C6F722E626C7565293B0A09097365745261646172436F6C6F7228436F6C6F722E626C61636B293B0A09097365745363616E436F6C6F7228436F6C6F722E79656C6C6F77293B0A0A09092F2F204C6F6F7020666F72657665720A09097768696C6520287472756529207B0A0909092F2F2054656C6C207468652067616D652074686174207768656E2077652074616B65206D6F76652C0A0909092F2F207765276C6C20616C736F2077616E7420746F207475726E2072696768742E2E2E2061206C6F742E0A0909097365745475726E5269676874283130303030293B0A0909092F2F204C696D6974206F757220737065656420746F20350A0909097365744D617856656C6F636974792835293B0A0909092F2F205374617274206D6F76696E672028616E64207475726E696E67290A0909096168656164283130303030293B0A0909092F2F205265706561742E0A09097D0A097D0A0A092F2A2A0A09202A206F6E5363616E6E6564526F626F743A20466972652068617264210A09202A2F0A097075626C696320766F6964206F6E5363616E6E6564526F626F74285363616E6E6564526F626F744576656E74206529207B0A0909666972652833293B0A097D0A0A092F2A2A0A09202A206F6E486974526F626F743A202049662069742773206F7572206661756C742C207765276C6C2073746F70207475726E696E6720616E64206D6F76696E672C0A09202A20736F207765206E65656420746F207475726E20616761696E20746F206B656570207370696E6E696E672E0A09202A2F0A097075626C696320766F6964206F6E486974526F626F7428486974526F626F744576656E74206529207B0A090969662028652E67657442656172696E672829203E202D313020262620652E67657442656172696E672829203C20313029207B0A090909666972652833293B0A09097D0A090969662028652E69734D794661756C74282929207B0A0909097475726E5269676874283130293B0A09097D0A097D0A7D0A',0),
	(12,'User','sample','Target','Y','sample/Target.java','','Fri Jan 22 17:35:21 CST 2016','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sample;\n\n\nimport robocode.AdvancedRobot;\nimport robocode.Condition;\nimport robocode.CustomEvent;\n\nimport java.awt.*;\n\n\n/**\n * Target - a sample robot by Mathew Nelson.\n * <p/>\n * Sits still. Moves every time energy drops by 20.\n * This Robot demonstrates custom events.\n *\n * @author Mathew A. Nelson (original)\n * @author Flemming N. Larsen (contributor)\n */\npublic class Target extends AdvancedRobot {\n\n	int trigger; // Keeps track of when to move\n\n	/**\n	 * TrackFire\'s run method\n	 */\n	public void run() {\n		// Set colors\n		setBodyColor(Color.white);\n		setGunColor(Color.white);\n		setRadarColor(Color.white);\n\n		// Initially, we\'ll move when life hits 80\n		trigger = 80;\n		// Add a custom event named \"trigger hit\",\n		addCustomEvent(new Condition(\"triggerhit\") {\n			public boolean test() {\n				return (getEnergy() <= trigger);\n			}\n		});\n	}\n\n	/**\n	 * onCustomEvent handler\n	 */\n	public void onCustomEvent(CustomEvent e) {\n		// If our custom event \"triggerhit\" went off,\n		if (e.getCondition().getName().equals(\"triggerhit\")) {\n			// Adjust the trigger value, or\n			// else the event will fire again and again and again...\n			trigger -= 20;\n			out.println(\"Ouch, down to \"   (int) (getEnergy()   .5)   \" energy.\");\n			// move around a bit.\n			turnLeft(65);\n			ahead(100);\n		}\n	}\n}\n
	(13,'User','sample','Tracker','Y','sample/Tracker.java','','','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sample;\n\n\nimport robocode.HitRobotEvent;\nimport robocode.Robot;\nimport robocode.ScannedRobotEvent;\nimport robocode.WinEvent;\nimport static robocode.util.Utils.normalRelativeAngleDegrees;\n\nimport java.awt.*;\n\n\n/**\n * Tracker - a sample robot by Mathew Nelson.\n * <p/>\n * Locks onto a robot, moves close, fires when close.\n *\n * @author Mathew A. Nelson (original)\n * @author Flemming N. Larsen (contributor)\n */\npublic class Tracker extends Robot {\n	int count = 0; // Keeps track of how long we\'ve\n	// been searching for our target\n	double gunTurnAmt; // How much to turn our gun when searching\n	String trackName; // Name of the robot we\'re currently tracking\n\n	/**\n	 * run:  Tracker\'s main run function\n	 */\n	public void run() {\n		// Set colors\n		setBodyColor(new Color(128, 128, 50));\n		setGunColor(new Color(50, 50, 20));\n		setRadarColor(new Color(200, 200, 70));\n		setScanColor(Color.white);\n		setBulletColor(Color.blue);\n\n		// Prepare gun\n		trackName = null; // Initialize to not tracking anyone\n		setAdjustGunForRobotTurn(true); // Keep the gun still when we turn\n		gunTurnAmt = 10; // Initialize gunTurn to 10\n\n		// Loop forever\n		while (true) {\n			// turn the Gun (looks for enemy)\n			turnGunRight(gunTurnAmt);\n			// Keep track of how long we\'ve been looking\n			count++;\n			// If we\'ve haven\'t seen our target for 2 turns, look left\n			if (count > 2) {\n				gunTurnAmt = -10;\n			}\n			// If we still haven\'t seen our target for 5 turns, look right\n			if (count > 5) {\n				gunTurnAmt = 10;\n			}\n			// If we *still* haven\'t seen our target after 10 turns, find another target\n			if (count > 11) {\n				trackName = null;\n			}\n		}\n	}\n\n	/**\n	 * onScannedRobot:  Here\'s the good stuff\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n\n		// If we have a target, and this isn\'t it, return immediately\n		// so we can get more ScannedRobotEvents.\n		if (trackName != null && !e.getName().equals(trackName)) {\n			return;\n		}\n\n		// If we don\'t have a target, well, now we do!\n		if (trackName == null) {\n			trackName = e.getName();\n			out.println(\"Tracking \" + trackName);\n		}\n		// This is our target.  Reset count (see the run method)\n		count = 0;\n		// If our target is too far away, turn and move toward it.\n		if (e.getDistance() > 150) {\n			gunTurnAmt = normalRelativeAngleDegrees(e.getBearing() + (getHeading() - getRadarHeading()));\n\n			turnGunRight(gunTurnAmt); // Try changing these to setTurnGunRight,\n			turnRight(e.getBearing()); // and see how much Tracker improves...\n			// (you\'ll have to make Tracker an AdvancedRobot)\n			ahead(e.getDistance() - 140);\n			return;\n		}\n\n		// Our target is close.\n		gunTurnAmt = normalRelativeAngleDegrees(e.getBearing() + (getHeading() - getRadarHeading()));\n		turnGunRight(gunTurnAmt);\n		fire(3);\n\n		// Our target is too close!  Back up.\n		if (e.getDistance() < 100) {\n			if (e.getBearing() > -90 && e.getBearing() <= 90) {\n				back(40);\n			} else {\n				ahead(40);\n			}\n		}\n		scan();\n	}\n\n	/**\n	 * onHitRobot:  Set him as our new target\n	 */\n	public void onHitRobot(HitRobotEvent e) {\n		// Only print if he\'s not already our target.\n		if (trackName != null && !trackName.equals(e.getName())) {\n			out.println(\"Tracking \" + e.getName() + \" due to collision\");\n		}\n		// Set the target\n		trackName = e.getName();\n		// Back up a bit.\n		// Note:  We won\'t get scan events while we\'re doing this!\n		// An AdvancedRobot might use setBack(); execute();\n		gunTurnAmt = normalRelativeAngleDegrees(e.getBearing() + (getHeading() - getRadarHeading()));\n		turnGunRight(gunTurnAmt);\n		fire(3);\n		back(50);\n	}\n\n	/**\n	 * onWin:  Do a victory dance\n	 */\n	public void onWin(WinEvent e) {\n		for (int i = 0; i < 50; i++) {\n			turnRight(30);\n			turnLeft(30);\n		}\n	}\n}
	(14,'User','sample','TrackFire','Y','sample/TrackFire.java','','','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sample;\n\n\nimport robocode.Robot;\nimport robocode.ScannedRobotEvent;\nimport robocode.WinEvent;\nimport static robocode.util.Utils.normalRelativeAngleDegrees;\n\nimport java.awt.*;\n\n\n/**\n * TrackFire - a sample robot by Mathew Nelson.\n * <p/>\n * Sits still. Tracks and fires at the nearest robot it sees.\n *\n * @author Mathew A. Nelson (original)\n * @author Flemming N. Larsen (contributor)\n */\npublic class TrackFire extends Robot {\n\n	/**\n	 * TrackFire\'s run method\n	 */\n	public void run() {\n		// Set colors\n		setBodyColor(Color.pink);\n		setGunColor(Color.pink);\n		setRadarColor(Color.pink);\n		setScanColor(Color.pink);\n		setBulletColor(Color.pink);\n\n		// Loop forever\n		while (true) {\n			turnGunRight(10); // Scans automatically\n		}\n	}\n\n	/**\n	 * onScannedRobot:  We have a target.  Go get it.\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		// Calculate exact location of the robot\n		double absoluteBearing = getHeading() + e.getBearing();\n		double bearingFromGun = normalRelativeAngleDegrees(absoluteBearing - getGunHeading());\n\n		// If it\'s close enough, fire!\n		if (Math.abs(bearingFromGun) <= 3) {\n			turnGunRight(bearingFromGun);\n			// We check gun heat here, because calling fire()\n			// uses a turn, which could cause us to lose track\n			// of the other robot.\n			if (getGunHeat() == 0) {\n				fire(Math.min(3 - Math.abs(bearingFromGun), getEnergy() - .1));\n			}\n		} // otherwise just set the gun to turn.\n		// Note:  This will have no effect until we call scan()\n		else {\n			turnGunRight(bearingFromGun);\n		}\n		// Generates another scan event if we see a robot.\n		// We only need to call this if the gun (and therefore radar)\n		// are not turning.  Otherwise, scan is called automatically.\n		if (bearingFromGun == 0) {\n			scan();\n		}\n	}\n\n	public void onWin(WinEvent e) {\n		// Victory dance\n		turnRight(36000);\n	}\n}
	(15,'User','sample','VelociRobot','Y','C:/robocode/robots/sample/VelociRobot.java','','','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sample;\n\n\nimport robocode.HitByBulletEvent;\nimport robocode.HitWallEvent;\nimport robocode.RateControlRobot;\nimport robocode.ScannedRobotEvent;\n\n\n/**\n * This is a sample of a robot using the RateControlRobot class\n * \n * @author Joshua Galecki (original)\n */\npublic class VelociRobot extends RateControlRobot {\n\n	int turnCounter;\n	public void run() {\n\n		turnCounter = 0;\n		setGunRotationRate(15);\n		\n		while (true) {\n			if (turnCounter % 64 == 0) {\n				// Straighten out, if we were hit by a bullet and are turning\n				setTurnRate(0);\n				// Go forward with a velocity of 4\n				setVelocityRate(4);\n			}\n			if (turnCounter % 64 == 32) {\n				// Go backwards, faster\n				setVelocityRate(-6);\n			}\n			turnCounter++;\n			execute();\n		}\n	}\n\n	public void onScannedRobot(ScannedRobotEvent e) {\n		fire(1);\n	}\n\n	public void onHitByBullet(HitByBulletEvent e) {\n		// Turn to confuse the other robot\n		setTurnRate(5);\n	}\n	\n	public void onHitWall(HitWallEvent e) {\n		// Move away from the wall\n		setVelocityRate(-1 * getVelocityRate());\n	}\n}',X'2F2A2A0A202A20436F707972696768742028632920323030312D32303134204D617468657720412E204E656C736F6E20616E6420526F626F636F646520636F6E7472696275746F72730A202A20416C6C207269676874732072657365727665642E20546869732070726F6772616D20616E6420746865206163636F6D70616E79696E67206D6174657269616C730A202A20617265206D61646520617661696C61626C6520756E64657220746865207465726D73206F66207468652045636C69707365205075626C6963204C6963656E73652076312E300A202A207768696368206163636F6D70616E696573207468697320646973747269627574696F6E2C20616E6420697320617661696C61626C652061740A202A20687474703A2F2F726F626F636F64652E736F75726365666F7267652E6E65742F6C6963656E73652F65706C2D7631302E68746D6C0A202A2F0A7061636B6167652073616D706C653B0A0A0A696D706F727420726F626F636F64652E486974427942756C6C65744576656E743B0A696D706F727420726F626F636F64652E48697457616C6C4576656E743B0A696D706F727420726F626F636F64652E52617465436F6E74726F6C526F626F743B0A696D706F727420726F626F636F64652E5363616E6E6564526F626F744576656E743B0A0A0A2F2A2A0A202A205468697320697320612073616D706C65206F66206120726F626F74207573696E67207468652052617465436F6E74726F6C526F626F7420636C6173730A202A200A202A2040617574686F72204A6F736875612047616C65636B6920286F726967696E616C290A202A2F0A7075626C696320636C6173732056656C6F6369526F626F7420657874656E64732052617465436F6E74726F6C526F626F74207B0A0A09696E74207475726E436F756E7465723B0A097075626C696320766F69642072756E2829207B0A0A09097475726E436F756E746572203D20303B0A090973657447756E526F746174696F6E52617465283135293B0A09090A09097768696C6520287472756529207B0A090909696620287475726E436F756E7465722025203634203D3D203029207B0A090909092F2F205374726169676874656E206F75742C20696620776520776572652068697420627920612062756C6C657420616E6420617265207475726E696E670A090909097365745475726E526174652830293B0A090909092F2F20476F20666F7277617264207769746820612076656C6F63697479206F6620340A0909090973657456656C6F63697479526174652834293B0A0909097D0A090909696620287475726E436F756E7465722025203634203D3D20333229207B0A090909092F2F20476F206261636B77617264732C206661737465720A0909090973657456656C6F6369747952617465282D36293B0A0909097D0A0909097475726E436F756E7465722B2B3B0A0909096578656375746528293B0A09097D0A097D0A0A097075626C696320766F6964206F6E5363616E6E6564526F626F74285363616E6E6564526F626F744576656E74206529207B0A0909666972652831293B0A097D0A0A097075626C696320766F6964206F6E486974427942756C6C657428486974427942756C6C65744576656E74206529207B0A09092F2F205475726E20746F20636F6E6675736520746865206F7468657220726F626F740A09097365745475726E526174652835293B0A097D0A090A097075626C696320766F6964206F6E48697457616C6C2848697457616C6C4576656E74206529207B0A09092F2F204D6F766520617761792066726F6D207468652077616C6C0A090973657456656C6F6369747952617465282D31202A2067657456656C6F63697479526174652829293B0A097D0A7D0A',0),
	(16,'User','sample','Walls','Y','sample/Walls.java','','Mon Jan 25 10:03:39 CST 2016','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sample;\n\n\nimport robocode.HitRobotEvent;\nimport robocode.Robot;\nimport robocode.ScannedRobotEvent;\n\nimport java.awt.*;\n\n\n/**\n * Walls - a sample robot by Mathew Nelson, and maintained by Flemming N. Larsen\n * <p/>\n * Moves around the outer edge with the gun facing in.\n *\n * @author Mathew A. Nelson (original)\n * @author Flemming N. Larsen (contributor)\n */\npublic class Walls extends Robot {\n\n	boolean peek; // Don\'t turn if there\'s a robot there\n	double moveAmount; // How much to move\n\n	/**\n	 * run: Move around the walls\n	 */\n	public void run() {\n		// Set colors\n		setBodyColor(Color.black);\n		setGunColor(Color.black);\n		setRadarColor(Color.orange);\n		setBulletColor(Color.cyan);\n		setScanColor(Color.cyan);\n\n		// Initialize moveAmount to the maximum possible for this battlefield.\n		moveAmount = Math.max(getBattleFieldWidth(), getBattleFieldHeight());\n		// Initialize peek to false\n		peek = false;\n\n		// turnLeft to face a wall.\n		// getHeading() % 90 means the remainder of\n		// getHeading() divided by 90.\n		turnLeft(getHeading() % 90);\n		ahead(moveAmount);\n		// Turn the gun to turn right 90 degrees.\n		peek = true;\n		turnGunRight(90);\n		turnRight(90);\n\n		while (true) {\n			// Look before we turn when ahead() completes.\n			peek = true;\n			// Move up the wall\n			ahead(moveAmount);\n			// Don\'t look now\n			peek = false;\n			// Turn to the next wall\n			turnRight(90);\n		}\n	}\n\n	/**\n	 * onHitRobot:  Move away a bit.\n	 */\n	public void onHitRobot(HitRobotEvent e) {\n		// If he\'s in front of us, set back up a bit.\n		if (e.getBearing() > -90 && e.getBearing() < 90) {\n			back(100);\n		} // else he\'s in back of us, so set ahead a bit.\n		else {\n			ahead(100);\n		}\n	}\n\n	/**\n	 * onScannedRobot:  Fire!\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		fire(2);\n		// Note that scan is called automatically when the robot is moving.\n		// By calling it manually here, we make sure we generate another scan event if there\'s a robot on the next\n		// wall, so that we do not start moving up it until it\'s gone.\n		if (peek) {\n			scan();\n		}\n	}\n}\n
	(17,'User','sampleex','Alien','Y','C:/robocode/robots/sampleex/Alien.java','','','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sampleex;\n\n\nimport robocode.*;\nimport robocode.robotinterfaces.IBasicEvents;\nimport robocode.robotinterfaces.IBasicRobot;\nimport robocode.robotinterfaces.peer.IBasicRobotPeer;\nimport robocode.robotinterfaces.peer.IStandardRobotPeer;\n\nimport java.io.PrintStream;\n\n\n/**\n * A sample robot.\n * Is not inherited from classic base robots, uses new experimental access to RobotPeer.\n * Use -DEXPERIMENTAL=true to start robocode for this robot.\n *\n * @author Pavel Savara (original)\n */\npublic class Alien implements IBasicEvents, IBasicRobot, Runnable {\n\n	PrintStream out;\n	IStandardRobotPeer peer;\n\n	public Runnable getRobotRunnable() {\n		return this;\n	}\n\n	public IBasicEvents getBasicEventListener() {\n		return this;\n	}\n\n	public void setPeer(IBasicRobotPeer iRobotPeer) {\n		peer = (IStandardRobotPeer) iRobotPeer;\n	}\n\n	public void setOut(PrintStream printStream) {\n		out = printStream;\n	}\n\n	public void run() {\n		while (true) {\n			peer.move(100); // Move ahead 100\n			peer.turnGun(Math.PI * 2); // Spin gun around\n			peer.move(-100); // Move back 100\n			peer.turnGun(Math.PI * 2); // Spin gun around\n		}\n	}\n\n	public void onScannedRobot(ScannedRobotEvent e) {\n		peer.setFire(1);\n	}\n\n	public void onHitByBullet(HitByBulletEvent e) {\n		peer.turnBody(Math.PI / 2 + e.getBearingRadians());\n	}\n\n	public void onStatus(StatusEvent e) {}\n\n	public void onBulletHit(BulletHitEvent e) {}\n\n	public void onBulletHitBullet(BulletHitBulletEvent e) {}\n\n	public void onBulletMissed(BulletMissedEvent e) {}\n\n	public void onDeath(DeathEvent e) {}\n\n	public void onHitRobot(HitRobotEvent e) {}\n\n	public void onHitWall(HitWallEvent e) {}\n\n	public void onRobotDeath(RobotDeathEvent e) {}\n\n	public void onWin(WinEvent e) {}\n}
	(18,'User','sampleex','AlienComposition','Y','C:/robocode/robots/sampleex/AlienComposition.java','','Fri Dec 18 15:57:54 CST 2015','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sampleex;\n\n\nimport robocode.*;\nimport robocode.robotinterfaces.IBasicEvents;\nimport robocode.robotinterfaces.IBasicRobot;\nimport robocode.robotinterfaces.peer.IBasicRobotPeer;\nimport robocode.robotinterfaces.peer.IStandardRobotPeer;\n\nimport java.io.PrintStream;\n\n\n/**\n * A sample robot.\n * Is not inherited from classic base robots, uses new experimental access to RobotPeer.\n * Use -DEXPERIMENTAL=true to start robocode for this robot.\n * This composition version is showing possible decomposition of robot, main runnable and event handler to different classes.\n *\n * @author Pavel Savara (original)\n */\npublic class AlienComposition implements IBasicRobot {\n	PrintStream out;\n	IStandardRobotPeer peer;\n	final AlienMain main;\n	final AlienEventHandler handler;\n\n	public AlienComposition() {\n		main = new AlienMain();\n		handler = new AlienEventHandler();\n	}\n\n	public void setPeer(IBasicRobotPeer iRobotPeer) {\n		peer = (IStandardRobotPeer) iRobotPeer;\n	}\n\n	public void setOut(PrintStream printStream) {\n		out = printStream;\n	}\n\n	public Runnable getRobotRunnable() {\n		return main;\n	}\n\n	public IBasicEvents getBasicEventListener() {\n		return handler;\n	}\n\n	class AlienMain implements Runnable {\n		public void run() {\n			while (true) {\n				peer.move(100); // Move ahead 100\n				peer.turnGun(Math.PI * 2); // Spin gun around\n				peer.move(-100); // Move back 100\n				peer.turnGun(Math.PI * 2); // Spin gun around\n			}\n		}\n	}\n\n\n	class AlienEventHandler implements IBasicEvents {\n		public void onScannedRobot(ScannedRobotEvent e) {\n			peer.setFire(1);\n		}\n\n		public void onHitByBullet(HitByBulletEvent e) {\n			peer.turnBody(Math.PI / 2   e.getBearingRadians());\n		}\n\n		public void onStatus(StatusEvent e) {}\n\n		public void onBulletHit(BulletHitEvent e) {}\n\n		public void onBulletHitBullet(BulletHitBulletEvent e) {}\n\n		public void onBulletMissed(BulletMissedEvent e) {}\n\n		public void onDeath(DeathEvent e) {}\n\n		public void onHitRobot(HitRobotEvent e) {}\n\n		public void onHitWall(HitWallEvent e) {}\n\n		public void onRobotDeath(RobotDeathEvent e) {}\n\n		public void onWin(WinEvent e) {}\n	}\n}
	(19,'User','sampleex','MasterAndSlave','Y','C:/robocode/robots/sampleex/MasterAndSlave.java','','','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sampleex;\n\n\nimport robocode.AdvancedRobot;\nimport robocode.HitByBulletEvent;\nimport robocode.ScannedRobotEvent;\nimport robocode.robotinterfaces.IAdvancedEvents;\nimport robocode.robotinterfaces.IAdvancedRobot;\nimport robocode.robotinterfaces.IBasicEvents;\nimport robocode.robotinterfaces.IInteractiveEvents;\nimport robocode.robotinterfaces.peer.IBasicRobotPeer;\n\nimport java.io.PrintStream;\n\n\n/**\n * @author Pavel Savara (original)\n */\npublic class MasterAndSlave extends MasterBase implements IAdvancedRobot {\n\n	/**\n	 * This is not showing any aditional qualities over normal MyFirst robot.\n	 * But it could, because architecture is no more tied by inheritance from Robot base class.\n	 */\n	public void run() {\n		while (true) {\n			ahead(100); // Move ahead 100\n			turnGunRight(360); // Spin gun around\n			back(100); // Move back 100\n			turnGunRight(360); // Spin gun around\n		}\n	}\n\n	public void onScannedRobot(ScannedRobotEvent e) {\n		fire(1);\n	}\n\n	public void onHitByBullet(HitByBulletEvent e) {\n		turnLeft(90 - e.getBearing());\n	}\n\n	public IInteractiveEvents getInteractiveEventListener() {\n		return null;\n	}\n}\n\n\n/**\n * Infrastructure base class, for helpers and boring implementation details\n */\nabstract class MasterBase {\n\n	public MasterBase() {\n		helperRobot = new Slave(this);\n	}\n\n	private final AdvancedRobot helperRobot;\n\n	public IAdvancedEvents getAdvancedEventListener() {\n		return helperRobot;\n	}\n\n	public IInteractiveEvents getSystemEventListener() {\n		return helperRobot;\n	}\n\n	public Runnable getRobotRunnable() {\n		return helperRobot;\n	}\n\n	public IBasicEvents getBasicEventListener() {\n		return helperRobot;\n	}\n\n	public void setPeer(IBasicRobotPeer robotPeer) {\n		helperRobot.setPeer(robotPeer);\n	}\n\n	public void setOut(PrintStream printStream) {\n		helperRobot.setOut(printStream);\n	}\n\n	public void turnGunRight(double degrees) {\n		helperRobot.turnGunRight(degrees);\n	}\n\n	public void turnLeft(double degrees) {\n		helperRobot.turnLeft(degrees);\n	}\n\n	public void ahead(double distance) {\n		helperRobot.ahead(distance);\n	}\n\n	public void back(double distance) {\n		helperRobot.back(distance);\n	}\n\n	public void fire(double power) {\n		helperRobot.fire(power);\n	}\n\n	public void onScannedRobot(ScannedRobotEvent e) {}\n\n	public void onHitByBullet(HitByBulletEvent e) {}\n\n	public void run() {}\n}
	(20,'User','sampleex','ProxyOfGreyEminence','Y','C:/robocode/robots/sampleex/ProxyOfGreyEminence.java','','','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sampleex;\n\n\nimport robocode.AdvancedRobot;\nimport robocode.HitByBulletEvent;\nimport robocode.ScannedRobotEvent;\n\n\n/**\n * This is just dummy proxy, it\'s hiding the Eminence and\n * giving it more freedom to inherit from Monk rather than from Robot.\n *\n * @author Pavel Savara (original)\n */\npublic class ProxyOfGreyEminence extends AdvancedRobot {\n	private final GreyEminence monk;\n\n	public ProxyOfGreyEminence() {\n		monk = new GreyEminence(this);\n	}\n\n	public void onHitByBullet(HitByBulletEvent event) {\n		monk.onHitByBullet(event);\n	}\n\n	public void onScannedRobot(ScannedRobotEvent event) {\n		monk.onScannedRobot(event);\n	}\n\n	public void run() {\n		monk.run();\n	}\n}\n\n\n/**\n * The power behind the throne.\n */\nclass GreyEminence extends RegullarMonk {\n	private final ProxyOfGreyEminence proxy;\n\n	public GreyEminence(ProxyOfGreyEminence proxy) {\n		this.proxy = proxy;\n	}\n\n	/**\n	 * This is not showing any aditional qualities over normal MyFirst robot.\n	 * But it could, because architecture is no more tied by inheritance from Robot base class.\n	 */\n	public void run() {\n		while (true) {\n			proxy.ahead(100); // Move ahead 100\n			proxy.turnGunRight(360); // Spin gun around\n			proxy.back(100); // Move back 100\n			proxy.turnGunRight(360); // Spin gun around\n		}\n	}\n\n	public void onScannedRobot(ScannedRobotEvent e) {\n		proxy.fire(1);\n	}\n\n	public void onHitByBullet(HitByBulletEvent e) {\n		proxy.turnLeft(90 - e.getBearing());\n	}\n}
	(21,'User','sampleex','RegullarMonk','Y','C:/robocode/robots/sampleex/RegullarMonk.java','','','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sampleex;\n\n\n/**\n * Monk of a order. Implements anything too boring for Eminence.\n * The infractructure base class.\n *\n * @author Pavel Savara (original)\n */\nabstract class RegullarMonk {}
	(22,'User','sampleex','Slave','Y','C:/robocode/robots/sampleex/Slave.java','','','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sampleex;\n\n\nimport robocode.AdvancedRobot;\nimport robocode.HitByBulletEvent;\nimport robocode.ScannedRobotEvent;\n\n\n/**\n * This is robot derived from AdvancedRobot.\n * Only reason to use this inheritance and this class is that external robots are unable to call RobotPeer directly.\n *\n * @author Pavel Savara (original)\n */\nclass Slave extends AdvancedRobot {\n	final MasterBase parent;\n\n	public Slave(MasterBase parent) {\n		this.parent = parent;\n	}\n\n	public void run() {\n		parent.run();\n	}\n\n	public void onScannedRobot(ScannedRobotEvent e) {\n		parent.onScannedRobot(e);\n	}\n\n	public void onHitByBullet(HitByBulletEvent e) {\n		parent.onHitByBullet(e);\n	}\n}
	(23,'User','samplesentry','BorderGuard','Y','C:/robocode/robots/samplesentry/BorderGuard','','Mon Jan 25 10:04:31 CST 2016','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage samplesentry;\n\n\nimport robocode.*;\nimport robocode.util.Utils;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.awt.geom.Point2D;\nimport java.util.*;\n\n\n/**\n * BorderGuard - is a sample robot that demonstrates how the BorderSentry interface can be used for\n * creating a robot that guards the border area of the battle field, and which is efficient against\n * robots trying to hide at corners and robots sneaking around near the borders.\n * <p>\n * This robot is somewhat advanced due to:<br>\n * 1) it uses linear targeting for predicting how to hit robots that moves in straight lines.<br>\n * 2) it will only fire at a robot, if it figures out that its bullets will do damage to that\n * particular robot, e.g. when the robots predicted future position will be within the sentry border\n * attack range.<br>\n * 3) it has an efficient scanner that keeps the scan angle as little as possible to get as new\n * scanned data for enemy robots as possible.<br>\n * 4) it picks a target robot to fire at, which is the nearest robot our robot will be able to\n * damage (by predicting its future position using linear targeting).<br>\n * 5) it only moves along the borders of the battle field and constantly changes its direction, so\n * it is not an easy target, and it will try to get as close to its target robot as possible.<br>\n * <p>\n * Lots of improvements can be made to this robot by copying it - making it even stronger. The\n * intention with of this sample robot is to serve as a more advanced example of how a AdvancedRobot\n * can be made, and how it can be structured as most sample robots are far simpler.\n * <p>\n * \n * Credits goes to the hard working Robocoders at the RoboWiki. :-)\n * <p>\n * \n * This robot makes use of the Oldest Scanned melee scanner from the RoboWiki:<br>\n * http://robowiki.net/wiki/Melee_Radar\n * <p>\n * \n * In addition, it makes use of the Exact Non-iterative Solution for Linear Targeting from the\n * RoboWiki:<br>\n * http://robowiki.net/wiki/Linear_Targeting\n * \n * @author Flemming N. Larsen\n * \n * @version 1.0\n * \n * @since 1.9.0.0\n */\npublic class BorderGuard extends AdvancedRobot implements BorderSentry {\n\n	// Constants\n	final double FIREPOWER = 3; // Max. power => violent as this robot can afford it!\n	final double HALF_ROBOT_SIZE = 18; // Robot size is 36x36 units, so the half size is 18 units\n\n	// Map containing data for all scanned robots.\n	// The key to the map is a robot name and the value is an object containing robot data.\n	final Map<String, RobotData> enemyMap;\n\n	// Scanning direction, where the radar turns to the right with positive values, and turns\n	// to the left with negative values.\n	double scanDir = 1;\n\n	// Oldest scanned robot. Can be null.\n	RobotData oldestScanned;\n\n	// Target robot for the gun. Can be null meaning that there is currently no target robot.\n	RobotData target;\n\n	// Last time when the robot shifted its direction\n	long lastDirectionShift;\n\n	// Current direction, where 1 means ahead (forward) and -1 means back\n	int direction = 1;\n\n	/**\n	 * Constructs this robot.\n	 */\n	public BorderGuard() {\n		// We initialize a specialized HashMap that uses a linked list for the access order.\n		// This means that the last accessed robot entry is listed first, when we iterate over its\n		// values. This robot always sweep the radar towards the oldest scanned robot.\n		enemyMap = new LinkedHashMap<String, RobotData>(5, 2, true);\n	}\n\n	/**\n	 * Main method that is called by the game when the robot engage in the next round of a battle.\n	 */\n	@Override\n	public void run() {\n		// Do initialization stuff here before the loop\n		initialize();\n\n		// Loop forever. If the robot does not take action, the game will disable our robot!\n		while (true) {\n			// Handle a single turn...\n\n			// Handle the radar that scans enemy robots\n			handleRadar();\n			// Handle the gun by turning it and fire at our target\n			handleGun();\n			// Move the robot around on the battlefield\n			moveRobot();\n\n			// Scan for other robots. Note that this method will execute all pending commands for\n			// the next turn. Hence, scan() ends the turn for our robot.\n			scan();\n		}\n	}\n\n	/**\n	 * This method is called by the game when your robot sees another robot, i.e. when the robot\'s\n	 * radar scan \"hits\" another robot.\n	 * \n	 * @param scannedRobotEvent\n	 *            is a ScannedRobotEvent event.\n	 */\n	@Override\n	public void onScannedRobot(ScannedRobotEvent scannedRobotEvent) {\n		// Check that the scanned robot is not a sentry robot\n		if (!scannedRobotEvent.isSentryRobot()) {\n			// The scanned robot is not a sentry robot...\n\n			// Update the enemy map\n			updateEnemyMap(scannedRobotEvent);\n\n			// Update the scan direction\n			updateScanDirection(scannedRobotEvent);\n\n			// Update enemy target positions\n			updateEnemyTargetPositions();\n		}\n	}\n\n	/**\n	 * This method is called by the game when another robot dies.\n	 * \n	 * @param robotDeathEvent\n	 *            is the RobotDeathEvent that occurs, when another robot dies, which contains data\n	 *            for the robot that died.\n	 */\n	@Override\n	public void onRobotDeath(RobotDeathEvent robotDeathEvent) {\n		// Gets the name of the robot that died\n		final String deadRobotName = robotDeathEvent.getName();\n\n		// Remove the robot data for the robot that died from the enemy map\n		enemyMap.remove(deadRobotName);\n\n		// Remove the data entry for the oldest scanned robot, if we have such an entry\n		if (oldestScanned != null
	(24,'User','sampleteam','MyFirstDroid','Y','C:/robocode/robots/sampleteam/MyFirstDroid.java','','','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sampleteam;\n\n\nimport robocode.Droid;\nimport robocode.MessageEvent;\nimport robocode.TeamRobot;\nimport static robocode.util.Utils.normalRelativeAngleDegrees;\n\n\n/**\n * SimpleDroid - a sample robot by Mathew Nelson.\n * <p/>\n * Follows orders of team leader.\n *\n * @author Mathew A. Nelson (original)\n * @author Flemming N. Larsen (contributor)\n */\npublic class MyFirstDroid extends TeamRobot implements Droid {\n\n	/**\n	 * run:  Droid\'s default behavior\n	 */\n	public void run() {\n		out.println(\"MyFirstDroid ready.\");\n	}\n\n	/**\n	 * onMessageReceived:  What to do when our leader sends a message\n	 */\n	public void onMessageReceived(MessageEvent e) {\n		// Fire at a point\n		if (e.getMessage() instanceof Point) {\n			Point p = (Point) e.getMessage();\n			// Calculate x and y to target\n			double dx = p.getX() - this.getX();\n			double dy = p.getY() - this.getY();\n			// Calculate angle to target\n			double theta = Math.toDegrees(Math.atan2(dx, dy));\n\n			// Turn gun to target\n			turnGunRight(normalRelativeAngleDegrees(theta - getGunHeading()));\n			// Fire hard!\n			fire(3);\n		} // Set our colors\n		else if (e.getMessage() instanceof RobotColors) {\n			RobotColors c = (RobotColors) e.getMessage();\n\n			setBodyColor(c.bodyColor);\n			setGunColor(c.gunColor);\n			setRadarColor(c.radarColor);\n			setScanColor(c.scanColor);\n			setBulletColor(c.bulletColor);\n		}\n	}\n}
	(25,'User','sampleteam','MyFirstLeader','Y','C:/robocode/robots/sampleteam/MyFirstTeam.java','','','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sampleteam;\n\n\nimport robocode.HitByBulletEvent;\nimport robocode.ScannedRobotEvent;\nimport robocode.TeamRobot;\n\nimport java.awt.*;\nimport java.io.IOException;\n\n\n/**\n * MyFirstLeader - a sample team robot by Mathew Nelson.\n * <p/>\n * Looks around for enemies, and orders teammates to fire\n *\n * @author Mathew A. Nelson (original)\n * @author Flemming N. Larsen (contributor)\n */\npublic class MyFirstLeader extends TeamRobot {\n\n	/**\n	 * run:  Leader\'s default behavior\n	 */\n	public void run() {\n		// Prepare RobotColors object\n		RobotColors c = new RobotColors();\n\n		c.bodyColor = Color.red;\n		c.gunColor = Color.red;\n		c.radarColor = Color.red;\n		c.scanColor = Color.yellow;\n		c.bulletColor = Color.yellow;\n\n		// Set the color of this robot containing the RobotColors\n		setBodyColor(c.bodyColor);\n		setGunColor(c.gunColor);\n		setRadarColor(c.radarColor);\n		setScanColor(c.scanColor);\n		setBulletColor(c.bulletColor);\n		try {\n			// Send RobotColors object to our entire team\n			broadcastMessage(c);\n		} catch (IOException ignored) {}\n		// Normal behavior\n		while (true) {\n			setTurnRadarRight(10000);\n			ahead(100);\n			back(100);\n		}\n	}\n\n	/**\n	 * onScannedRobot:  What to do when you see another robot\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		// Don\'t fire on teammates\n		if (isTeammate(e.getName())) {\n			return;\n		}\n		// Calculate enemy bearing\n		double enemyBearing = this.getHeading() + e.getBearing();\n		// Calculate enemy\'s position\n		double enemyX = getX() + e.getDistance() * Math.sin(Math.toRadians(enemyBearing));\n		double enemyY = getY() + e.getDistance() * Math.cos(Math.toRadians(enemyBearing));\n\n		try {\n			// Send enemy position to teammates\n			broadcastMessage(new Point(enemyX, enemyY));\n		} catch (IOException ex) {\n			out.println(\"Unable to send order: \");\n			ex.printStackTrace(out);\n		}\n	}\n\n	/**\n	 * onHitByBullet:  Turn perpendicular to bullet path\n	 */\n	public void onHitByBullet(HitByBulletEvent e) {\n		turnLeft(90 - e.getBearing());\n	}\n}',X'2F2A2A0A202A20436F707972696768742028632920323030312D32303136204D617468657720412E204E656C736F6E20616E6420526F626F636F646520636F6E7472696275746F72730A202A20416C6C207269676874732072657365727665642E20546869732070726F6772616D20616E6420746865206163636F6D70616E79696E67206D6174657269616C730A202A20617265206D61646520617661696C61626C6520756E64657220746865207465726D73206F66207468652045636C69707365205075626C6963204C6963656E73652076312E300A202A207768696368206163636F6D70616E696573207468697320646973747269627574696F6E2C20616E6420697320617661696C61626C652061740A202A20687474703A2F2F726F626F636F64652E736F75726365666F7267652E6E65742F6C6963656E73652F65706C2D7631302E68746D6C0A202A2F0A7061636B6167652073616D706C657465616D3B0A0A0A696D706F727420726F626F636F64652E486974427942756C6C65744576656E743B0A696D706F727420726F626F636F64652E5363616E6E6564526F626F744576656E743B0A696D706F727420726F626F636F64652E5465616D526F626F743B0A0A696D706F7274206A6176612E6177742E2A3B0A696D706F7274206A6176612E696F2E494F457863657074696F6E3B0A0A0A2F2A2A0A202A204D7946697273744C6561646572202D20612073616D706C65207465616D20726F626F74206279204D6174686577204E656C736F6E2E0A202A203C702F3E0A202A204C6F6F6B732061726F756E6420666F7220656E656D6965732C20616E64206F7264657273207465616D6D6174657320746F20666972650A202A0A202A2040617574686F72204D617468657720412E204E656C736F6E20286F726967696E616C290A202A2040617574686F7220466C656D6D696E67204E2E204C617273656E2028636F6E7472696275746F72290A202A2F0A7075626C696320636C617373204D7946697273744C656164657220657874656E6473205465616D526F626F74207B0A0A092F2A2A0A09202A2072756E3A20204C656164657227732064656661756C74206265686176696F720A09202A2F0A097075626C696320766F69642072756E2829207B0A09092F2F205072657061726520526F626F74436F6C6F7273206F626A6563740A0909526F626F74436F6C6F72732063203D206E657720526F626F74436F6C6F727328293B0A0A0909632E626F6479436F6C6F72203D20436F6C6F722E7265643B0A0909632E67756E436F6C6F72203D20436F6C6F722E7265643B0A0909632E7261646172436F6C6F72203D20436F6C6F722E7265643B0A0909632E7363616E436F6C6F72203D20436F6C6F722E79656C6C6F773B0A0909632E62756C6C6574436F6C6F72203D20436F6C6F722E79656C6C6F773B0A0A09092F2F205365742074686520636F6C6F72206F66207468697320726F626F7420636F6E7461696E696E672074686520526F626F74436F6C6F72730A0909736574426F6479436F6C6F7228632E626F6479436F6C6F72293B0A090973657447756E436F6C6F7228632E67756E436F6C6F72293B0A09097365745261646172436F6C6F7228632E7261646172436F6C6F72293B0A09097365745363616E436F6C6F7228632E7363616E436F6C6F72293B0A090973657442756C6C6574436F6C6F7228632E62756C6C6574436F6C6F72293B0A0909747279207B0A0909092F2F2053656E6420526F626F74436F6C6F7273206F626A65637420746F206F757220656E74697265207465616D0A09090962726F6164636173744D6573736167652863293B0A09097D2063617463682028494F457863657074696F6E2069676E6F72656429207B7D0A09092F2F204E6F726D616C206265686176696F720A09097768696C6520287472756529207B0A0909097365745475726E52616461725269676874283130303030293B0A090909616865616428313030293B0A0909096261636B28313030293B0A09097D0A097D0A0A092F2A2A0A09202A206F6E5363616E6E6564526F626F743A20205768617420746F20646F207768656E20796F752073656520616E6F7468657220726F626F740A09202A2F0A097075626C696320766F6964206F6E5363616E6E6564526F626F74285363616E6E6564526F626F744576656E74206529207B0A09092F2F20446F6E27742066697265206F6E207465616D6D617465730A09096966202869735465616D6D61746528652E6765744E616D6528292929207B0A09090972657475726E3B0A09097D0A09092F2F2043616C63756C61746520656E656D792062656172696E670A0909646F75626C6520656E656D7942656172696E67203D20746869732E67657448656164696E672829202B20652E67657442656172696E6728293B0A09092F2F2043616C63756C61746520656E656D79277320706F736974696F6E0A0909646F75626C6520656E656D7958203D20676574582829202B20652E67657444697374616E63652829202A204D6174682E73696E284D6174682E746F52616469616E7328656E656D7942656172696E6729293B0A0909646F75626C6520656E656D7959203D20676574592829202B20652E67657444697374616E63652829202A204D6174682E636F73284D6174682E746F52616469616E7328656E656D7942656172696E6729293B0A0A0909747279207B0A0909092F2F2053656E6420656E656D7920706F736974696F6E20746F207465616D6D617465730A09090962726F6164636173744D657373616765286E657720506F696E7428656E656D79582C20656E656D795929293B0A09097D2063617463682028494F457863657074696F6E20657829207B0A0909096F75742E7072696E746C6E2822556E61626C6520746F2073656E64206F726465723A2022293B0A09090965782E7072696E74537461636B5472616365286F7574293B0A09097D0A097D0A0A092F2A2A0A09202A206F6E486974427942756C6C65743A20205475726E2070657270656E646963756C617220746F2062756C6C657420706174680A09202A2F0A097075626C696320766F6964206F6E486974427942756C6C657428486974427942756C6C65744576656E74206529207B0A09097475726E4C656674283930202D20652E67657442656172696E672829293B0A097D0A7D0A',0),
	(26,'User','sampleteam','Point','Y','C:/robocode/robots/sampleteam/MyFirstLeader.java','','','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sampleteam;\n\n\n/**\n * Point - a serializable point class\n */\npublic class Point implements java.io.Serializable {\n\n	private static final long serialVersionUID = 1L;\n\n	private double x = 0.0;\n	private double y = 0.0;\n\n	public Point(double x, double y) {\n		this.x = x;\n		this.y = y;\n	}\n\n	public double getX() {\n		return x;\n	}\n\n	public double getY() {\n		return y;\n	}\n}',X'2F2A2A0A202A20436F707972696768742028632920323030312D32303136204D617468657720412E204E656C736F6E20616E6420526F626F636F646520636F6E7472696275746F72730A202A20416C6C207269676874732072657365727665642E20546869732070726F6772616D20616E6420746865206163636F6D70616E79696E67206D6174657269616C730A202A20617265206D61646520617661696C61626C6520756E64657220746865207465726D73206F66207468652045636C69707365205075626C6963204C6963656E73652076312E300A202A207768696368206163636F6D70616E696573207468697320646973747269627574696F6E2C20616E6420697320617661696C61626C652061740A202A20687474703A2F2F726F626F636F64652E736F75726365666F7267652E6E65742F6C6963656E73652F65706C2D7631302E68746D6C0A202A2F0A7061636B6167652073616D706C657465616D3B0A0A0A2F2A2A0A202A20506F696E74202D20612073657269616C697A61626C6520706F696E7420636C6173730A202A2F0A7075626C696320636C61737320506F696E7420696D706C656D656E7473206A6176612E696F2E53657269616C697A61626C65207B0A0A0970726976617465207374617469632066696E616C206C6F6E672073657269616C56657273696F6E554944203D20314C3B0A0A097072697661746520646F75626C652078203D20302E303B0A097072697661746520646F75626C652079203D20302E303B0A0A097075626C696320506F696E7428646F75626C6520782C20646F75626C65207929207B0A0909746869732E78203D20783B0A0909746869732E79203D20793B0A097D0A0A097075626C696320646F75626C6520676574582829207B0A090972657475726E20783B0A097D0A0A097075626C696320646F75626C6520676574592829207B0A090972657475726E20793B0A097D0A7D0A',0),
	(27,'User','sampleteam','RobotColors','Y','C:/robocode/robots/sampleteam/RobotColors.java','','','/**\n * Copyright (c) 2001-2014 Mathew A. Nelson and Robocode contributors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://robocode.sourceforge.net/license/epl-v10.html\n */\npackage sampleteam;\n\n\nimport java.awt.*;\n\n\n/**\n * RobotColors - A serializable class to send Colors to teammates.\n *\n * @author Mathew A. Nelson (original)\n * @author Flemming N. Larsen (contributor)\n */\npublic class RobotColors implements java.io.Serializable {\n\n	private static final long serialVersionUID = 1L;\n\n	public Color bodyColor;\n	public Color gunColor;\n	public Color radarColor;\n	public Color scanColor;\n	public Color bulletColor;\n}',X'2F2A2A0A202A20436F707972696768742028632920323030312D32303136204D617468657720412E204E656C736F6E20616E6420526F626F636F646520636F6E7472696275746F72730A202A20416C6C207269676874732072657365727665642E20546869732070726F6772616D20616E6420746865206163636F6D70616E79696E67206D6174657269616C730A202A20617265206D61646520617661696C61626C6520756E64657220746865207465726D73206F66207468652045636C69707365205075626C6963204C6963656E73652076312E300A202A207768696368206163636F6D70616E696573207468697320646973747269627574696F6E2C20616E6420697320617661696C61626C652061740A202A20687474703A2F2F726F626F636F64652E736F75726365666F7267652E6E65742F6C6963656E73652F65706C2D7631302E68746D6C0A202A2F0A7061636B6167652073616D706C657465616D3B0A0A0A696D706F7274206A6176612E6177742E2A3B0A0A0A2F2A2A0A202A20526F626F74436F6C6F7273202D20412073657269616C697A61626C6520636C61737320746F2073656E6420436F6C6F727320746F207465616D6D617465732E0A202A0A202A2040617574686F72204D617468657720412E204E656C736F6E20286F726967696E616C290A202A2040617574686F7220466C656D6D696E67204E2E204C617273656E2028636F6E7472696275746F72290A202A2F0A7075626C696320636C61737320526F626F74436F6C6F727320696D706C656D656E7473206A6176612E696F2E53657269616C697A61626C65207B0A0A0970726976617465207374617469632066696E616C206C6F6E672073657269616C56657273696F6E554944203D20314C3B0A0A097075626C696320436F6C6F7220626F6479436F6C6F723B0A097075626C696320436F6C6F722067756E436F6C6F723B0A097075626C696320436F6C6F72207261646172436F6C6F723B0A097075626C696320436F6C6F72207363616E436F6C6F723B0A097075626C696320436F6C6F722062756C6C6574436F6C6F723B0A7D0A',0),
	(28,'User','sampleteam','Rob','Y','C:/robocode/robots/sampleteam/Rob.java','Fri Dec 18 15:42:13 CST 2015','Fri Jan 15 10:21:52 CST 2016','package sampleteam;\nimport robocode.*;\n\nimport robocode.HitByBulletEvent;\nimport robocode.Robot;\nimport robocode.ScannedRobotEvent;\n//import java.awt.Color;\n\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\n\n/**\n * Rob- a robot by Esther\n */\npublic class Rob extends Robot{\n	/**\n	 * run: Robdefault behavior\n	 */\n	public void run() {\n	// Initialization of the robot should be put here\n\n	// After trying out your robot, try uncommenting the import at the top,\n	// and the next line:\n\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\n\n	// Robot main loop\n		while(true) {\n			// Replace the next 4 lines with any behavior you would like\n			ahead(100);\n			turnGunRight(360);\n			back(100);\n			turnGunRight(360);\n		}\n	}\n	/**\n	 * onScannedRobot: What to do when you see another robot\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		// Replace the next line with any behavior you would like\n		fire(1);\n	}\n\n	/**\n	 * onHitByBullet: What to do when you\'re hit by a bullet\n	 */\n	public void onHitByBullet(HitByBulletEvent e) {\n		// Replace the next line with any behavior you would like\n		back(10);\n	}\n	\n	/**\n	 * onHitWall: What to do when you hit a wall\n	 */\n	public void onHitWall(HitWallEvent e) {\n		// Replace the next line with any behavior you would like\n		back(20);\n	}	\n}\n
	(29,'User','sample','Robb','Y','C:/robocode/robots/sample/Robb.java','Tue Jan 12 12:29:19 CST 2016','Wed Feb 03 10:10:55 CST 2016','package sample;\r\nimport robocode.*;\r\n//import java.awt.Color;\r\n						\r\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\r\n															\r\n/**\r\n* Robb- a robot by User\r\n */\r\npublic class Robb extends Robot{	/**\r\n	 * run: Robbdefault behavior	 */\r\n	public void run() {\r\n	// Initialization of the robot should be put here\r\n												\r\n	// After trying out your robot, try uncommenting the import at the top\r\n	// and the next line:\r\n						\r\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\r\n								\r\n	// Robot main loop\r\n		while(true) {\r\n			// Replace the next 4 lines with any behavior you would like\r\n			ahead(100);\r\n			turnGunRight(360);\r\n			back(100);\r\n			turnGunRight(360);\r\n		}\r\n	}\r\n	/**\r\n	 * onScannedRobot: What to do when you see another robot\r\n	 */\r\n	public void onScannedRobot(ScannedRobotEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		fire(1);\r\n	}\r\n						\r\n	/**\r\n	 * onHitByBullet: What to do when you\'re hit by a bullet\r\n	 */\r\n	public void onHitByBullet(HitByBulletEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		back(10);\r\n	}\r\n					\r\n	/**	 * onHitWall: What to do when you hit a wall\r\n	 */	public void onHitWall(HitWallEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		back(20);\r\n	}	\r\n}\r\n\r\n
	(30,'User','sample','HelloRobot','Y','C:/robocode/robots/sample/HelloRobot.java','Tue Jan 12 12:33:59 CST 2016','','package sample;\nimport robocode.*;\n//import java.awt.Color;\n						\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\n															\n/**\n* HelloRobot- a robot by User\n */\npublic class HelloRobot extends Robot{	/**\n	 * run: HelloRobotdefault behavior	 */\n	public void run() {\n	// Initialization of the robot should be put here\n												\n	// After trying out your robot, try uncommenting the import at the top\n	// and the next line:\n						\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\n								\n	// Robot main loop\n		while(true) {\n			// Replace the next 4 lines with any behavior you would like\n			ahead(100);\n			turnGunRight(360);\n			back(100);\n			turnGunRight(360);\n		}\n	}\n	/**\n	 * onScannedRobot: What to do when you see another robot\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		// Replace the next line with any behavior you would like\n		fire(1);\n	}\n						\n	/**\n	 * onHitByBullet: What to do when you\'re hit by a bullet\n	 */\n	public void onHitByBullet(HitByBulletEvent e) {\n		// Replace the next line with any behavior you would like\n		back(10);\n	}\n					\n	/**	 * onHitWall: What to do when you hit a wall\n	 */	public void onHitWall(HitWallEvent e) {\n		// Replace the next line with any behavior you would like\n		back(20);\n	}	\n}	\n\n\n\n\n\n\n\n\n\n
	(31,'User','sample','abcde','Y','C:/robocode/robots/sample/abcde.java','Thu Jun 02 12:28:07 CDT 2016','Thu Jun 02 12:28:59 CDT 2016','\r\npackage sample;\r\nimport robocode.*;\r\nimport robocode.HitByBulletEvent;\r\nimport robocode.Robot;\r\nimport robocode.ScannedRobotEvent;\r\n//import java.awt.Color;\r\n\r\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\r\n\r\n/**\r\n * abcde- a robot by Esther\r\n */\r\npublic class abcde extends Robot{\r\n	/**\r\n	 * run: abcdedefault behavior\r\n	 */\r\n	public void run() {\r\n	// Initialization of the robot should be put here\r\n\r\n	// After trying out your robot, try uncommenting the import at the top,\r\n	// and the next line:\r\n\r\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\r\n\r\n	// Robot main loop\r\n		while(true) {\r\n			// Replace the next 4 lines with any behavior you would like\r\n			ahead(100);\r\n			turnGunRight(36000);\r\n			back(100);\r\n			turnGunRight(360);\r\n		}\r\n	}\r\n	/**\r\n	 * onScannedRobot: What to do when you see another robot\r\n	 */\r\n	public void onScannedRobot(ScannedRobotEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		fire(1);\r\n	}\r\n\r\n	/**\r\n	 * onHitByBullet: What to do when you\'re hit by a bullet\r\n	 */\r\n	public void onHitByBullet(HitByBulletEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		back(10);\r\n	}\r\n	\r\n	/**\r\n	 * onHitWall: What to do when you hit a wall\r\n	 */\r\n	public void onHitWall(HitWallEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		back(20);\r\n	}	\r\n}\r\n    ',X'0D0A7061636B6167652073616D706C653B0D0A696D706F727420726F626F636F64652E2A3B0D0A696D706F727420726F626F636F64652E486974427942756C6C65744576656E743B0D0A696D706F727420726F626F636F64652E526F626F743B0D0A696D706F727420726F626F636F64652E5363616E6E6564526F626F744576656E743B0D0A2F2F696D706F7274206A6176612E6177742E436F6C6F723B0D0A0D0A2F2F204150492068656C703A20687474703A2F2F726F626F636F64652E736F75726365666F7267652E6E65742F646F63732F726F626F636F64652F726F626F636F64652F526F626F742E68746D6C0D0A0D0A2F2A2A0D0A202A2061626364652D206120726F626F74206279204573746865720D0A202A2F0D0A7075626C696320636C61737320616263646520657874656E647320526F626F747B0D0A092F2A2A0D0A09202A2072756E3A20616263646564656661756C74206265686176696F720D0A09202A2F0D0A097075626C696320766F69642072756E2829207B0D0A092F2F20496E697469616C697A6174696F6E206F662074686520726F626F742073686F756C642062652070757420686572650D0A0D0A092F2F20416674657220747279696E67206F757420796F757220726F626F742C2074727920756E636F6D6D656E74696E672074686520696D706F72742061742074686520746F702C0D0A092F2F20616E6420746865206E657874206C696E653A0D0A0D0A092F2F20736574436F6C6F727328436F6C6F722E7265642C436F6C6F722E626C75652C436F6C6F722E677265656E293B202F2F20626F64792C67756E2C72616461720D0A0D0A092F2F20526F626F74206D61696E206C6F6F700D0A09097768696C65287472756529207B0D0A0909092F2F205265706C61636520746865206E6578742034206C696E6573207769746820616E79206265686176696F7220796F7520776F756C64206C696B650D0A090909616865616428313030293B0D0A0909097475726E47756E5269676874283336303030293B0D0A0909096261636B28313030293B0D0A0909097475726E47756E526967687428333630293B0D0A09097D0D0A097D0D0A092F2A2A0D0A09202A206F6E5363616E6E6564526F626F743A205768617420746F20646F207768656E20796F752073656520616E6F7468657220726F626F740D0A09202A2F0D0A097075626C696320766F6964206F6E5363616E6E6564526F626F74285363616E6E6564526F626F744576656E74206529207B0D0A09092F2F205265706C61636520746865206E657874206C696E65207769746820616E79206265686176696F7220796F7520776F756C64206C696B650D0A0909666972652831293B0D0A097D0D0A0D0A092F2A2A0D0A09202A206F6E486974427942756C6C65743A205768617420746F20646F207768656E20796F752772652068697420627920612062756C6C65740D0A09202A2F0D0A097075626C696320766F6964206F6E486974427942756C6C657428486974427942756C6C65744576656E74206529207B0D0A09092F2F205265706C61636520746865206E657874206C696E65207769746820616E79206265686176696F7220796F7520776F756C64206C696B650D0A09096261636B283130293B0D0A097D0D0A090D0A092F2A2A0D0A09202A206F6E48697457616C6C3A205768617420746F20646F207768656E20796F752068697420612077616C6C0D0A09202A2F0D0A097075626C696320766F6964206F6E48697457616C6C2848697457616C6C4576656E74206529207B0D0A09092F2F205265706C61636520746865206E657874206C696E65207769746820616E79206265686176696F7220796F7520776F756C64206C696B650D0A09096261636B283230293B0D0A097D090D0A7D0D0A20202020',0);

INSERT INTO `robot` (`id`, `userID`, `packageID`, `robotID`, `dataaccess`, `filepath`, `CreatedDate`, `UpdatedDate`, `RobotCode`, `file`, `accessLevel`)
VALUES
	(32,'User','sample','FirstAbcd','Y','C:/robocode/robots/sample/FirstAbcd.java','Fri Jun 03 14:07:01 CDT 2016','Fri Jun 03 14:07:24 CDT 2016','\r\npackage sample;\r\nimport robocode.*;\r\nimport robocode.HitByBulletEvent;\r\nimport robocode.Robot;\r\nimport robocode.ScannedRobotEvent;\r\n//import java.awt.Color;\r\n\r\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\r\n\r\n/**\r\n * FirstAbcd- a robot by Esther\r\n */\r\npublic class FirstAbcd extends Robot{\r\n	/**\r\n	 * run: FirstAbcddefault behavior\r\n	 */\r\n	public void run() {\r\n	// Initialization of the robot should be put here\r\n\r\n	// After trying out your robot, try uncommenting the import at the top,\r\n	// and the next line:\r\n\r\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\r\n\r\n	// Robot main loop\r\n		while(true) {\r\n			// Replace the next 4 lines with any behavior you would like\r\n			ahead(100);\r\n			turnGunRight(3600909);\r\n			back(100);\r\n			turnGunRight(360);\r\n		}\r\n	}\r\n	/**\r\n	 * onScannedRobot: What to do when you see another robot\r\n	 */\r\n	public void onScannedRobot(ScannedRobotEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		fire(1);\r\n	}\r\n\r\n	/**\r\n	 * onHitByBullet: What to do when you\'re hit by a bullet\r\n	 */\r\n	public void onHitByBullet(HitByBulletEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		back(10);\r\n	}\r\n	\r\n	/**\r\n	 * onHitWall: What to do when you hit a wall\r\n	 */\r\n	public void onHitWall(HitWallEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		back(20);\r\n	}	\r\n}\r\n    ',X'0D0A7061636B6167652073616D706C653B0D0A696D706F727420726F626F636F64652E2A3B0D0A696D706F727420726F626F636F64652E486974427942756C6C65744576656E743B0D0A696D706F727420726F626F636F64652E526F626F743B0D0A696D706F727420726F626F636F64652E5363616E6E6564526F626F744576656E743B0D0A2F2F696D706F7274206A6176612E6177742E436F6C6F723B0D0A0D0A2F2F204150492068656C703A20687474703A2F2F726F626F636F64652E736F75726365666F7267652E6E65742F646F63732F726F626F636F64652F726F626F636F64652F526F626F742E68746D6C0D0A0D0A2F2A2A0D0A202A204669727374416263642D206120726F626F74206279204573746865720D0A202A2F0D0A7075626C696320636C6173732046697273744162636420657874656E647320526F626F747B0D0A092F2A2A0D0A09202A2072756E3A2046697273744162636464656661756C74206265686176696F720D0A09202A2F0D0A097075626C696320766F69642072756E2829207B0D0A092F2F20496E697469616C697A6174696F6E206F662074686520726F626F742073686F756C642062652070757420686572650D0A0D0A092F2F20416674657220747279696E67206F757420796F757220726F626F742C2074727920756E636F6D6D656E74696E672074686520696D706F72742061742074686520746F702C0D0A092F2F20616E6420746865206E657874206C696E653A0D0A0D0A092F2F20736574436F6C6F727328436F6C6F722E7265642C436F6C6F722E626C75652C436F6C6F722E677265656E293B202F2F20626F64792C67756E2C72616461720D0A0D0A092F2F20526F626F74206D61696E206C6F6F700D0A09097768696C65287472756529207B0D0A0909092F2F205265706C61636520746865206E6578742034206C696E6573207769746820616E79206265686176696F7220796F7520776F756C64206C696B650D0A090909616865616428313030293B0D0A0909097475726E47756E52696768742833363030393039293B0D0A0909096261636B28313030293B0D0A0909097475726E47756E526967687428333630293B0D0A09097D0D0A097D0D0A092F2A2A0D0A09202A206F6E5363616E6E6564526F626F743A205768617420746F20646F207768656E20796F752073656520616E6F7468657220726F626F740D0A09202A2F0D0A097075626C696320766F6964206F6E5363616E6E6564526F626F74285363616E6E6564526F626F744576656E74206529207B0D0A09092F2F205265706C61636520746865206E657874206C696E65207769746820616E79206265686176696F7220796F7520776F756C64206C696B650D0A0909666972652831293B0D0A097D0D0A0D0A092F2A2A0D0A09202A206F6E486974427942756C6C65743A205768617420746F20646F207768656E20796F752772652068697420627920612062756C6C65740D0A09202A2F0D0A097075626C696320766F6964206F6E486974427942756C6C657428486974427942756C6C65744576656E74206529207B0D0A09092F2F205265706C61636520746865206E657874206C696E65207769746820616E79206265686176696F7220796F7520776F756C64206C696B650D0A09096261636B283130293B0D0A097D0D0A090D0A092F2A2A0D0A09202A206F6E48697457616C6C3A205768617420746F20646F207768656E20796F752068697420612077616C6C0D0A09202A2F0D0A097075626C696320766F6964206F6E48697457616C6C2848697457616C6C4576656E74206529207B0D0A09092F2F205265706C61636520746865206E657874206C696E65207769746820616E79206265686176696F7220796F7520776F756C64206C696B650D0A09096261636B283230293B0D0A097D090D0A7D0D0A20202020',0),
	(33,'User','sample','ab','Y','C:/robocode/robots/sample/ab.java','Fri Jun 03 14:33:27 CDT 2016',NULL,'package sample;\nimport robocode.*;\n//import java.awt.Color;\n						\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\n															\n/**\n* ab- a robot by User\n */\npublic class ab extends Robot{	/**\n	 * run: abdefault behavior	 */\n	public void run() {\n	// Initialization of the robot should be put here\n												\n	// After trying out your robot, try uncommenting the import at the top\n	// and the next line:\n						\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\n								\n	// Robot main loop\n		while(true) {\n			// Replace the next 4 lines with any behavior you would like\n			ahead(100);\n			turnGunRight(360);\n			back(100);\n			turnGunRight(360);\n		}\n	}\n	/**\n	 * onScannedRobot: What to do when you see another robot\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		// Replace the next line with any behavior you would like\n		fire(1);\n	}\n						\n	/**\n	 * onHitByBullet: What to do when you\'re hit by a bullet\n	 */\n	public void onHitByBullet(HitByBulletEvent e) {\n		// Replace the next line with any behavior you would like\n		back(10);\n	}\n					\n	/**	 * onHitWall: What to do when you hit a wall\n	 */	public void onHitWall(HitWallEvent e) {\n		// Replace the next line with any behavior you would like\n		back(20);\n	}	\n}	\n
	(34,'User','sample','NidhiFirst','Y','C:/robocode/robots/sample/NidhiFirst.java','Thu Sep 15 13:22:44 CDT 2016','Thu Sep 15 13:28:22 CDT 2016',' \r\npackage sample;\r\nimport robocode.*;\r\nimport robocode.HitByBulletEvent;\r\nimport robocode.Robot;\r\nimport robocode.ScannedRobotEvent;\r\n//import java.awt.Color;\r\n\r\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\r\n\r\n/**\r\n * NidhiFirst- a robot by Esther\r\n */\r\npublic class NidhiFirst extends Robot{\r\n	/**\r\n	 * run: NidhiFirstdefault behavior\r\n	 */\r\n	public void run() {\r\n	// Initialization of the robot should be put here\r\n\r\n	// After trying out your robot, try uncommenting the import at the top,\r\n	// and the next line:\r\n\r\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\r\n\r\n	// Robot main loop\r\n		while(true) {\r\n			// Replace the next 4 lines with any behavior you would like\r\n			ahead(100);\r\n			turnGunRight(360);\r\n			back(1000);\r\n			turnGunRight(360);\r\n		}\r\n	}\r\n	/**\r\n	 * onScannedRobot: What to do when you see another robot\r\n	 */\r\n	public void onScannedRobot(ScannedRobotEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		fire(1);\r\n	}\r\n\r\n	/**\r\n	 * onHitByBullet: What to do when you\'re hit by a bullet\r\n	 */\r\n	public void onHitByBullet(HitByBulletEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		back(10);\r\n	}\r\n	\r\n	/**\r\n	 * onHitWall: What to do when you hit a wall\r\n	 */\r\n	public void onHitWall(HitWallEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		back(20);\r\n	}	\r\n}\r\n    \r\n \r\n
	(35,'User','Select Package','First111','Y','C:/robocode/robots/Select Package/First111.java','Mon Sep 19 11:44:07 CDT 2016','Mon Sep 19 11:44:48 CDT 2016','\r\npackage Select Package;\r\nimport robocode.*;\r\nimport robocode.HitByBulletEvent;\r\nimport robocode.Robot;\r\nimport robocode.ScannedRobotEvent;\r\n//import java.awt.Color;\r\n\r\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\r\n\r\n/**\r\n * First111- a robot by Esther\r\n */\r\npublic class First111 extends Robot{\r\n	/**\r\n	 * run: First111default behavior\r\n	 */\r\n	public void run() {\r\n	// Initialization of the robot should be put here\r\n\r\n	// After trying out your robot, try uncommenting the import at the top,\r\n	// and the next line:\r\n\r\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\r\n\r\n	// Robot main loop\r\n		while(true) {\r\n			// Replace the next 4 lines with any behavior you would like\r\n			ahead(100);\r\n			turnGunRight(360);\r\n			back(100);\r\n			turnGunRight(360);\r\n		}\r\n	}\r\n	/**\r\n	 * onScannedRobot: What to do when you see another robot\r\n	 */\r\n	public void onScannedRobot(ScannedRobotEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		fire(1);\r\n	}\r\n\r\n	/**\r\n	 * onHitByBullet: What to do when you\'re hit by a bullet\r\n	 */\r\n	public void onHitByBullet(HitByBulletEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		back(10);\r\n	}\r\n	\r\n	/**\r\n	 * onHitWall: What to do when you hit a wall\r\n	 */\r\n	public void onHitWall(HitWallEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		back(20);\r\n	}	\r\n}\r\n    ',NULL,0),
	(36,'User','sample','First12345','Y','C:/robocode/robots/sample/First12345.java','Fri Sep 23 16:09:33 CDT 2016','Fri Sep 23 16:11:28 CDT 2016','\r\npackage sample;\r\nimport robocode.*;\r\nimport robocode.HitByBulletEvent;\r\nimport robocode.Robot;\r\nimport robocode.ScannedRobotEvent;\r\n//import java.awt.Color;\r\n\r\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\r\n\r\n/**\r\n * First12345- a robot by Esther\r\n */\r\npublic class First12345 extends Robot{\r\n	/**\r\n	 * run: First12345default behavior\r\n	 */\r\n	public void run() {\r\n	// Initialization of the robot should be put here\r\n\r\n	// After trying out your robot, try uncommenting the import at the top,\r\n	// and the next line:\r\n\r\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\r\n\r\n	// Robot main loop\r\n		while(true) {\r\n			// Replace the next 4 lines with any behavior you would like\r\n			ahead(100);\r\n			turnGunRight(3600);\r\n			back(100);\r\n			turnGunRight(360);\r\n		}\r\n	}\r\n	/**\r\n	 * onScannedRobot: What to do when you see another robot\r\n	 */\r\n	public void onScannedRobot(ScannedRobotEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		fire(1);\r\n	}\r\n\r\n	/**\r\n	 * onHitByBullet: What to do when you\'re hit by a bullet\r\n	 */\r\n	public void onHitByBullet(HitByBulletEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		back(10);\r\n	}\r\n	\r\n	/**\r\n	 * onHitWall: What to do when you hit a wall\r\n	 */\r\n	public void onHitWall(HitWallEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		back(20);\r\n	}	\r\n}\r\n    \r\n
	(37,'User','sample','first121212121','Y','C:/robocode/robots/sample/first121212121.java','Fri Sep 23 16:58:22 CDT 2016','Fri Sep 23 16:59:22 CDT 2016','\r\npackage sample;\r\nimport robocode.*;\r\nimport robocode.HitByBulletEvent;\r\nimport robocode.Robot;\r\nimport robocode.ScannedRobotEvent;\r\n//import java.awt.Color;\r\n\r\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\r\n\r\n/**\r\n * first121212121- a robot by Esther\r\n */\r\npublic class first121212121 extends Robot{\r\n	/**\r\n	 * run: first121212121default behavior\r\n	 */\r\n	public void run() {\r\n	// Initialization of the robot should be put here\r\n\r\n	// After trying out your robot, try uncommenting the import at the top,\r\n	// and the next line:\r\n\r\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\r\n\r\n	// Robot main loop\r\n		while(true) {\r\n			// Replace the next 4 lines with any behavior you would like\r\n			ahead(100);\r\n			turnGunRight(360);\r\n			back(10000);\r\n			turnGunRight(360);\r\n		}\r\n	}\r\n	/**\r\n	 * onScannedRobot: What to do when you see another robot\r\n	 */\r\n	public void onScannedRobot(ScannedRobotEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		fire(1);\r\n	}\r\n\r\n	/**\r\n	 * onHitByBullet: What to do when you\'re hit by a bullet\r\n	 */\r\n	public void onHitByBullet(HitByBulletEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		back(10);\r\n	}\r\n	\r\n	/**\r\n	 * onHitWall: What to do when you hit a wall\r\n	 */\r\n	public void onHitWall(HitWallEvent e) {\r\n		// Replace the next line with any behavior you would like\r\n		back(20);\r\n	}	\r\n}\r\n
	(38,'User','sample','Crazy8_31','Y','C:/robocode/robots/sample/Crazy8_31.java','Thu Aug 31 12:44:44 CDT 2017',NULL,'package sample;\nimport robocode.*;\n//import java.awt.Color;\n						\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\n															\n/**\n* Crazy8_31- a robot by User\n */\npublic class Crazy8_31 extends Robot{	/**\n	 * run: Crazy8_31default behavior	 */\n	public void run() {\n	// Initialization of the robot should be put here\n												\n	// After trying out your robot, try uncommenting the import at the top\n	// and the next line:\n						\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\n								\n	// Robot main loop\n		while(true) {\n			// Replace the next 4 lines with any behavior you would like\n			ahead(100);\n			turnGunRight(360);\n			back(100);\n			turnGunRight(360);\n		}\n	}\n	/**\n	 * onScannedRobot: What to do when you see another robot\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		// Replace the next line with any behavior you would like\n		fire(1);\n	}\n						\n	/**\n	 * onHitByBullet: What to do when you\'re hit by a bullet\n	 */\n	public void onHitByBullet(HitByBulletEvent e) {\n		// Replace the next line with any behavior you would like\n		back(10);\n	}\n					\n	/**	 * onHitWall: What to do when you hit a wall\n	 */	public void onHitWall(HitWallEvent e) {\n		// Replace the next line with any behavior you would like\n		back(20);\n	}	\n}	\n
	(39,'User','sample','abc0831','Y','C:/robocode/robots/sample/abc0831.java','Thu Aug 31 12:46:11 CDT 2017',NULL,'package sample;\nimport robocode.*;\n//import java.awt.Color;\n						\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\n															\n/**\n* abc0831- a robot by User\n */\npublic class abc0831 extends Robot{	/**\n	 * run: abc0831default behavior	 */\n	public void run() {\n	// Initialization of the robot should be put here\n												\n	// After trying out your robot, try uncommenting the import at the top\n	// and the next line:\n						\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\n								\n	// Robot main loop\n		while(true) {\n			// Replace the next 4 lines with any behavior you would like\n			ahead(100);\n			turnGunRight(360);\n			back(100);\n			turnGunRight(360);\n		}\n	}\n	/**\n	 * onScannedRobot: What to do when you see another robot\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		// Replace the next line with any behavior you would like\n		fire(1);\n	}\n						\n	/**\n	 * onHitByBullet: What to do when you\'re hit by a bullet\n	 */\n	public void onHitByBullet(HitByBulletEvent e) {\n		// Replace the next line with any behavior you would like\n		back(10);\n	}\n					\n	/**	 * onHitWall: What to do when you hit a wall\n	 */	public void onHitWall(HitWallEvent e) {\n		// Replace the next line with any behavior you would like\n		back(20);\n	}	\n}	\n
	(40,'User','sample','test1','Y','C:/robocode/robots/sample/test1.java','Thu Aug 31 13:15:36 CDT 2017',NULL,'package sample;\nimport robocode.*;\n//import java.awt.Color;\n						\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\n															\n/**\n* test1- a robot by User\n */\npublic class test1 extends Robot{	/**\n	 * run: test1default behavior	 */\n	public void run() {\n	// Initialization of the robot should be put here\n												\n	// After trying out your robot, try uncommenting the import at the top\n	// and the next line:\n						\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\n								\n	// Robot main loop\n		while(true) {\n			// Replace the next 4 lines with any behavior you would like\n			ahead(100);\n			turnGunRight(360);\n			back(100);\n			turnGunRight(360);\n		}\n	}\n	/**\n	 * onScannedRobot: What to do when you see another robot\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		// Replace the next line with any behavior you would like\n		fire(1);\n	}\n						\n	/**\n	 * onHitByBullet: What to do when you\'re hit by a bullet\n	 */\n	public void onHitByBullet(HitByBulletEvent e) {\n		// Replace the next line with any behavior you would like\n		back(10);\n	}\n					\n	/**	 * onHitWall: What to do when you hit a wall\n	 */	public void onHitWall(HitWallEvent e) {\n		// Replace the next line with any behavior you would like\n		back(20);\n	}	\n}	\n
	(70,'User','sample','test0901','Y','C:/robocode/robots/sample/test0901.java','Fri Sep 01 11:24:24 CDT 2017','Fri Sep 01 11:25:45 CDT 2017','package sample;\n\nimport robocode.*;\nimport robocode.HitByBulletEvent;\nimport robocode.Robot;\nimport robocode.ScannedRobotEvent;\n//import java.awt.Color;\n\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\n\n/**\n * test0901- a robot by User\n */\npublic class test0901 extends Robot{\n	/**\n	 * run: test0901default behavior\n	 */\n	public void run() {\n	// Initialization of the robot should be put here\n\n	// After trying out your robot, try uncommenting the import at the top,\n	// and the next line:\n\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\n\n	// Robot main loop\n		while(true) {\n			// Replace the next 4 lines with any behavior you would like\n			ahead(100);\n			turnGunRight(360);\n			back(100);\n			turnGunRight(360);\n		}\n	}\n	/**\n	 * onScannedRobot: What to do when you see another robot\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		// Replace the next line with any behavior you would like\n		fire(1);\n	}\n\n	/**\n	 * onHitByBullet: What to do when you\'re hit by a bullet\n	 */\n	public void onHitByBullet(HitByBulletEvent e) {\n		// Replace the next line with any behavior you would like\n		back(10);\n	}\n	\n	/**\n	 * onHitWall: What to do when you hit a wall\n	 */\n	public void onHitWall(HitWallEvent e) {\n		// Replace the next line with any behavior you would like\n		back(11120);\n	}	\n}\n
	(71,'User','sample','Test0109','Y','C:/robocode/robots/sample/Test0109.java','Fri Sep 01 11:55:28 CDT 2017','Fri Sep 01 11:55:36 CDT 2017','package sample;\n\nimport robocode.*;\nimport robocode.HitByBulletEvent;\nimport robocode.Robot;\nimport robocode.ScannedRobotEvent;\n//import java.awt.Color;\n\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\n\n/**\n * Test0109- a robot by User\n */\npublic class Test0109 extends Robot{\n	/**\n	 * run: Test0109default behavior\n	 */\n	public void run() {\n	// Initialization of the robot should be put here\n\n	// After trying out your robot, try uncommenting the import at the top,\n	// and the next line:\n\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\n\n	// Robot main loop\n		while(true) {\n			// Replace the next 4 lines with any behavior you would like\n			ahead(100);\n			turnGunRight(360);\n			back(100);\n			turnGunRight(360);\n		}\n	}\n	/**\n	 * onScannedRobot: What to do when you see another robot\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		// Replace the next line with any behavior you would like\n		fire(1);\n	}\n\n	/**\n	 * onHitByBullet: What to do when you\'re hit by a bullet\n	 */\n	public void onHitByBullet(HitByBulletEvent e) {\n		// Replace the next line with any behavior you would like\n		back(10);\n	}\n	\n	/**\n	 * onHitWall: What to do when you hit a wall\n	 */\n	public void onHitWall(HitWallEvent e) {\n		// Replace the next line with any behavior you would like\n		back(1120);\n	}	\n}\n    ',X'7061636B6167652073616D706C653B0A0A696D706F727420726F626F636F64652E2A3B0A696D706F727420726F626F636F64652E486974427942756C6C65744576656E743B0A696D706F727420726F626F636F64652E526F626F743B0A696D706F727420726F626F636F64652E5363616E6E6564526F626F744576656E743B0A2F2F696D706F7274206A6176612E6177742E436F6C6F723B0A0A2F2F204150492068656C703A20687474703A2F2F726F626F636F64652E736F75726365666F7267652E6E65742F646F63732F726F626F636F64652F726F626F636F64652F526F626F742E68746D6C0A0A2F2A2A0A202A2054657374303130392D206120726F626F7420627920557365720A202A2F0A7075626C696320636C61737320546573743031303920657874656E647320526F626F747B0A092F2A2A0A09202A2072756E3A20546573743031303964656661756C74206265686176696F720A09202A2F0A097075626C696320766F69642072756E2829207B0A092F2F20496E697469616C697A6174696F6E206F662074686520726F626F742073686F756C642062652070757420686572650A0A092F2F20416674657220747279696E67206F757420796F757220726F626F742C2074727920756E636F6D6D656E74696E672074686520696D706F72742061742074686520746F702C0A092F2F20616E6420746865206E657874206C696E653A0A0A092F2F20736574436F6C6F727328436F6C6F722E7265642C436F6C6F722E626C75652C436F6C6F722E677265656E293B202F2F20626F64792C67756E2C72616461720A0A092F2F20526F626F74206D61696E206C6F6F700A09097768696C65287472756529207B0A0909092F2F205265706C61636520746865206E6578742034206C696E6573207769746820616E79206265686176696F7220796F7520776F756C64206C696B650A090909616865616428313030293B0A0909097475726E47756E526967687428333630293B0A0909096261636B28313030293B0A0909097475726E47756E526967687428333630293B0A09097D0A097D0A092F2A2A0A09202A206F6E5363616E6E6564526F626F743A205768617420746F20646F207768656E20796F752073656520616E6F7468657220726F626F740A09202A2F0A097075626C696320766F6964206F6E5363616E6E6564526F626F74285363616E6E6564526F626F744576656E74206529207B0A09092F2F205265706C61636520746865206E657874206C696E65207769746820616E79206265686176696F7220796F7520776F756C64206C696B650A0909666972652831293B0A097D0A0A092F2A2A0A09202A206F6E486974427942756C6C65743A205768617420746F20646F207768656E20796F752772652068697420627920612062756C6C65740A09202A2F0A097075626C696320766F6964206F6E486974427942756C6C657428486974427942756C6C65744576656E74206529207B0A09092F2F205265706C61636520746865206E657874206C696E65207769746820616E79206265686176696F7220796F7520776F756C64206C696B650A09096261636B283130293B0A097D0A090A092F2A2A0A09202A206F6E48697457616C6C3A205768617420746F20646F207768656E20796F752068697420612077616C6C0A09202A2F0A097075626C696320766F6964206F6E48697457616C6C2848697457616C6C4576656E74206529207B0A09092F2F205265706C61636520746865206E657874206C696E65207769746820616E79206265686176696F7220796F7520776F756C64206C696B650A09096261636B2831313230293B0A097D090A7D0A20202020',0),
	(72,'User','sample','test1234','Y','C:/robocode/robots/sample/test1234.java','Fri Sep 01 13:22:11 CDT 2017',NULL,'package sample;\nimport robocode.*;\n//import java.awt.Color;\n						\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\n															\n/**\n* test1234- a robot by User\n */\npublic class test1234 extends Robot{	/**\n	 * run: test1234default behavior	 */\n	public void run() {\n	// Initialization of the robot should be put here\n												\n	// After trying out your robot, try uncommenting the import at the top\n	// and the next line:\n						\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\n								\n	// Robot main loop\n		while(true) {\n			// Replace the next 4 lines with any behavior you would like\n			ahead(100);\n			turnGunRight(360);\n			back(100);\n			turnGunRight(360);\n		}\n	}\n	/**\n	 * onScannedRobot: What to do when you see another robot\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		// Replace the next line with any behavior you would like\n		fire(1);\n	}\n						\n	/**\n	 * onHitByBullet: What to do when you\'re hit by a bullet\n	 */\n	public void onHitByBullet(HitByBulletEvent e) {\n		// Replace the next line with any behavior you would like\n		back(10);\n	}\n					\n	/**	 * onHitWall: What to do when you hit a wall\n	 */	public void onHitWall(HitWallEvent e) {\n		// Replace the next line with any behavior you would like\n		back(20);\n	}	\n}	\n
	(73,'User','sample','john','Y','C:/robocode/robots/sample/john.java','Mon Sep 11 13:17:02 CDT 2017','Tue Sep 12 11:06:08 CDT 2017','package sample;\n\nimport robocode.*;\nimport robocode.HitByBulletEvent;\nimport robocode.Robot;\nimport robocode.ScannedRobotEvent;\n//import java.awt.Color;\n\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\n\n/**\n * John- a robot by User\n */\npublic class John extends Robot{\n	/**\n	 * run: Johndefault behavior\n	 */\n	public void run() {\n	// Initialization of the robot should be put here\n\n	// After trying out your robot, try uncommenting the import at the top,\n	// and the next line:\n\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\n\n	// Robot main loop\n		while(true) {\n			// Replace the next 4 lines with any behavior you would like\n			ahead(100);\n			turnGunRight(360);\n			back(100);\n			turnGunRight(360);\n		}\n	}\n	/**\n	 * onScannedRobot: What to do when you see another robot\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		// Replace the next line with any behavior you would like\n		fire(1);\n	}\n\n	/**\n	 * onHitByBullet: What to do when you\'re hit by a bullet\n	 */\n	public void onHitByBullet(HitByBulletEvent e) {\n		// Replace the next line with any behavior you would like\n		back(10);\n	}\n	\n	/**\n	 * onHitWall: What to do when you hit a wall\n	 */\n	public void onHitWall(HitWallEvent e) {\n		// Replace the next line with any behavior you would like\n		back(20);\n	}	\n}\n    ',NULL,0),
	(74,'User','sample','John','Y','C:/robocode/robots/sample/John.java','Mon Sep 11 14:27:40 CDT 2017','Tue Sep 12 11:06:08 CDT 2017','package sample;\n\nimport robocode.*;\nimport robocode.HitByBulletEvent;\nimport robocode.Robot;\nimport robocode.ScannedRobotEvent;\n//import java.awt.Color;\n\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\n\n/**\n * John- a robot by User\n */\npublic class John extends Robot{\n	/**\n	 * run: Johndefault behavior\n	 */\n	public void run() {\n	// Initialization of the robot should be put here\n\n	// After trying out your robot, try uncommenting the import at the top,\n	// and the next line:\n\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\n\n	// Robot main loop\n		while(true) {\n			// Replace the next 4 lines with any behavior you would like\n			ahead(100);\n			turnGunRight(360);\n			back(100);\n			turnGunRight(360);\n		}\n	}\n	/**\n	 * onScannedRobot: What to do when you see another robot\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		// Replace the next line with any behavior you would like\n		fire(1);\n	}\n\n	/**\n	 * onHitByBullet: What to do when you\'re hit by a bullet\n	 */\n	public void onHitByBullet(HitByBulletEvent e) {\n		// Replace the next line with any behavior you would like\n		back(10);\n	}\n	\n	/**\n	 * onHitWall: What to do when you hit a wall\n	 */\n	public void onHitWall(HitWallEvent e) {\n		// Replace the next line with any behavior you would like\n		back(20);\n	}	\n}\n    ',NULL,0),
	(75,'User','sample','John','Y','C:/robocode/robots/sample/John.java','Tue Sep 12 11:04:33 CDT 2017','Tue Sep 12 11:06:08 CDT 2017','package sample;\n\nimport robocode.*;\nimport robocode.HitByBulletEvent;\nimport robocode.Robot;\nimport robocode.ScannedRobotEvent;\n//import java.awt.Color;\n\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\n\n/**\n * John- a robot by User\n */\npublic class John extends Robot{\n	/**\n	 * run: Johndefault behavior\n	 */\n	public void run() {\n	// Initialization of the robot should be put here\n\n	// After trying out your robot, try uncommenting the import at the top,\n	// and the next line:\n\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\n\n	// Robot main loop\n		while(true) {\n			// Replace the next 4 lines with any behavior you would like\n			ahead(100);\n			turnGunRight(360);\n			back(100);\n			turnGunRight(360);\n		}\n	}\n	/**\n	 * onScannedRobot: What to do when you see another robot\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		// Replace the next line with any behavior you would like\n		fire(1);\n	}\n\n	/**\n	 * onHitByBullet: What to do when you\'re hit by a bullet\n	 */\n	public void onHitByBullet(HitByBulletEvent e) {\n		// Replace the next line with any behavior you would like\n		back(10);\n	}\n	\n	/**\n	 * onHitWall: What to do when you hit a wall\n	 */\n	public void onHitWall(HitWallEvent e) {\n		// Replace the next line with any behavior you would like\n		back(20);\n	}	\n}\n    ',NULL,0),
	(76,'User','sample','kkkk','Y','C:/robocode/robots/sample/kkkk.java','Tue Sep 12 11:14:11 CDT 2017',NULL,'package sample;\nimport robocode.*;\n//import java.awt.Color;\n						\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\n															\n/**\n* kkkk- a robot by User\n */\npublic class kkkk extends Robot{	/**\n	 * run: kkkkdefault behavior	 */\n	public void run() {\n	// Initialization of the robot should be put here\n												\n	// After trying out your robot, try uncommenting the import at the top\n	// and the next line:\n						\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\n								\n	// Robot main loop\n		while(true) {\n			// Replace the next 4 lines with any behavior you would like\n			ahead(100);\n			turnGunRight(360);\n			back(100);\n			turnGunRight(360);\n		}\n	}\n	/**\n	 * onScannedRobot: What to do when you see another robot\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		// Replace the next line with any behavior you would like\n		fire(1);\n	}\n						\n	/**\n	 * onHitByBullet: What to do when you\'re hit by a bullet\n	 */\n	public void onHitByBullet(HitByBulletEvent e) {\n		// Replace the next line with any behavior you would like\n		back(10);\n	}\n					\n	/**	 * onHitWall: What to do when you hit a wall\n	 */	public void onHitWall(HitWallEvent e) {\n		// Replace the next line with any behavior you would like\n		back(20);\n	}	\n}	\n',NULL,0),
	(77,'User','sample','test','Y','C:/robocode/robots/sample/test.java','Tue Sep 12 11:26:30 CDT 2017','Tue Sep 12 11:31:06 CDT 2017','package sample;\n\nimport robocode.*;\nimport robocode.HitByBulletEvent;\nimport robocode.Robot;\nimport robocode.ScannedRobotEvent;\n//import java.awt.Color;\n\n// API help:    http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\n   \n/**\n * test- a robot by User\n */\npublic class test extends Robot{\n	/**\n	 * run: testdefault behavior\n	 */\n	public void run() {\n	// Initialization of the robot should be put here\n\n	// After trying out your robot, try uncommenting the import at the top,\n	// and the next line:\n\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\n\n	// Robot main loop\n		while(true) {\n			// Replace the next 4 lines with any behavior you would like\n			ahead(100);\n			turnGunRight(360);\n			back(100);\n			turnGunRight(360);\n		}\n	}\n	/**\n	 * onScannedRobot: What to do when you see another robot\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		// Replace the next line with any behavior you would like\n		fire(1);\n	}\n\n	/**\n	 * onHitByBullet: What to do when you\'re hit by a bullet\n	 */\n	public void onHitByBullet(HitByBulletEvent e) {\n		// Replace the next line with any behavior you would like\n		back(10);\n	}\n	\n	/**\n	 * onHitWall: What to do when you hit a wall\n	 */\n	public void onHitWall(HitWallEvent e) {\n		// Replace the next line with any behavior you would like\n		back(20);\n	}	\n}\n    ',NULL,0),
	(78,'User','sample','newrobotjohn','Y','C:/robocode/robots/sample/newrobotjohn.java','Sat Sep 16 10:29:00 CDT 2017',NULL,'package sample;\nimport robocode.*;\n//import java.awt.Color;\n						\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\n															\n/**\n* newrobotjohn- a robot by User\n */\npublic class newrobotjohn extends Robot{	/**\n	 * run: newrobotjohndefault behavior	 */\n	public void run() {\n	// Initialization of the robot should be put here\n												\n	// After trying out your robot, try uncommenting the import at the top\n	// and the next line:\n						\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\n								\n	// Robot main loop\n		while(true) {\n			// Replace the next 4 lines with any behavior you would like\n			ahead(100);\n			turnGunRight(360);\n			back(100);\n			turnGunRight(360);\n		}\n	}\n	/**\n	 * onScannedRobot: What to do when you see another robot\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		// Replace the next line with any behavior you would like\n		fire(1);\n	}\n						\n	/**\n	 * onHitByBullet: What to do when you\'re hit by a bullet\n	 */\n	public void onHitByBullet(HitByBulletEvent e) {\n		// Replace the next line with any behavior you would like\n		back(10);\n	}\n					\n	/**	 * onHitWall: What to do when you hit a wall\n	 */	public void onHitWall(HitWallEvent e) {\n		// Replace the next line with any behavior you would like\n		back(20);\n	}	\n}	\n',NULL,0),
	(79,'User','sampleteam','my robot','Y','/Users/neethuantony/git/CCRoboGroupD/RobocodeV1/robocode/robots/sampleteam/my robot.java','Thu Nov 02 17:02:21 CDT 2017','Thu Nov 02 17:02:31 CDT 2017','package sampleteam;\n\nimport robocode.*;\nimport robocode.HitByBulletEvent;\nimport robocode.Robot;\nimport robocode.ScannedRobotEvent;\n//import java.awt.Color;\n\n// API help: http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html\n\n/**\n * my robot- a robot by User\n */\npublic class my robot extends Robot{\n	/**\n	 * run: my robotdefault behavior\n	 */\n	public void run() {\n	// Initialization of the robot should be put here\n\n	// After trying out your robot, try uncommenting the import at the top,\n	// and the next line:\n\n	// setColors(Color.red,Color.blue,Color.green); // body,gun,radar\n\n	// Robot main loop\n		while(true) {\n			// Replace the next 4 lines with any behavior you would like\n			ahead(100);\n			turnGunRight(360);\n			back(100);\n			turnGunRight(360);\n		}\n	}\n	/**\n	 * onScannedRobot: What to do when you see another robot\n	 */\n	public void onScannedRobot(ScannedRobotEvent e) {\n		// Replace the next line with any behavior you would like\n		fire(1);\n	}\n\n	/**\n	 * onHitByBullet: What to do when you\'re hit by a bullet\n	 */\n	public void onHitByBullet(HitByBulletEvent e) {\n		// Replace the next line with any behavior you would like\n		back(10);\n	}\n	\n	/**\n	 * onHitWall: What to do when you hit a wall\n	 */\n	public void onHitWall(HitWallEvent e) {\n		// Replace the next line with any behavior you would like\n		back(20);\n	}	\n}\n    ',NULL,0);

/*!40000 ALTER TABLE `robot` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table robot3
# ------------------------------------------------------------

DROP TABLE IF EXISTS `robot3`;

CREATE TABLE `robot3` (
  `id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,
  `userID` varchar(20) DEFAULT NULL,
  `packageID` varchar(20) DEFAULT NULL,
  `robotID` varchar(20) DEFAULT NULL,
  `dataaccess` char(1) DEFAULT NULL,
  `filepath` varchar(100) DEFAULT NULL,
  `CreatedDate` varchar(50) DEFAULT NULL,
  `UpdatedDate` varchar(50) DEFAULT NULL,
  `RobotCode` text,
  `file` blob,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;



# Dump of table totalstat
# ------------------------------------------------------------

DROP TABLE IF EXISTS `totalstat`;

CREATE TABLE `totalstat` (
  `Rank` int(11) DEFAULT NULL,
  `RobotName` varchar(30) DEFAULT NULL,
  `TotalScore` int(11) DEFAULT NULL,
  `PercentofTotal` int(11) DEFAULT NULL,
  `1sts` int(11) DEFAULT NULL,
  `2nds` int(11) DEFAULT NULL,
  `3rds` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;



# Dump of table trial
# ------------------------------------------------------------

DROP TABLE IF EXISTS `trial`;

CREATE TABLE `trial` (
  `robotname` varchar(255) DEFAULT NULL,
  `robotcode` text
) ENGINE=InnoDB DEFAULT CHARSET=utf8;



# Dump of table users
# ------------------------------------------------------------

DROP TABLE IF EXISTS `users`;

CREATE TABLE `users` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL DEFAULT '',
  `permissionLevel` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;




/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
